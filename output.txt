Response from  https://api.smartthings.com/v1/locations
 items ( <class 'list'> ) : 
	 (0)
		 locationId ( <class 'str'> ) :  ec32f564-8061-453f-8ae3-cb5b541fe9f1
		 name ( <class 'str'> ) :  My home
		 allowed ( <class 'NoneType'> ) :  None
		 parent ( <class 'dict'> ) :  {'type': 'ACCOUNT', 'id': '1be7aec2-8533-47d4-8386-f6cf3076fe0a'}


	 (1)
		 locationId ( <class 'str'> ) :  6a2b7135-0400-4ef0-aef2-b7df0c0a5536
		 name ( <class 'str'> ) :  My Company
		 allowed ( <class 'NoneType'> ) :  None
		 parent ( <class 'dict'> ) :  {'type': 'ACCOUNT', 'id': '1be7aec2-8533-47d4-8386-f6cf3076fe0a'}


 _links ( <class 'NoneType'> ) : 
	 None


Response from  https://api.smartthings.com/v1/locations/ec32f564-8061-453f-8ae3-cb5b541fe9f1
	 locationId ( <class 'str'> ) : 
		 ec32f564-8061-453f-8ae3-cb5b541fe9f1
	 name ( <class 'str'> ) : 
		 My home
	 countryCode ( <class 'str'> ) : 
		 KOR
	 latitude ( <class 'NoneType'> ) : 
		 None
	 longitude ( <class 'NoneType'> ) : 
		 None
	 regionRadius ( <class 'NoneType'> ) : 
		 None
	 temperatureScale ( <class 'str'> ) : 
		 F
	 timeZoneId ( <class 'NoneType'> ) : 
		 None
	 locale ( <class 'str'> ) : 
		 ko-KR
	 backgroundImage ( <class 'NoneType'> ) : 
		 None
	 additionalProperties ( <class 'dict'> ) : 
		 {}
	 allowed ( <class 'NoneType'> ) : 
		 None
	 parent ( <class 'dict'> ) : 
		 {'type': 'ACCOUNT', 'id': '1be7aec2-8533-47d4-8386-f6cf3076fe0a'}
	 created ( <class 'int'> ) : 
		 1641638013389
	 lastModified ( <class 'int'> ) : 
		 1704870155463


Response from  https://api.smartthings.com/v1/locations/ec32f564-8061-453f-8ae3-cb5b541fe9f1/rooms
	 items ( <class 'list'> ) : 
		 (0)
			 allowed ( <class 'list'> ) :  ['w:rooms', 'd:rooms']
			 roomId ( <class 'str'> ) :  2e4bc9a1-1b19-4649-a3f2-a39a63ebe702
			 locationId ( <class 'str'> ) :  ec32f564-8061-453f-8ae3-cb5b541fe9f1
			 name ( <class 'str'> ) :  민혁의 방
			 backgroundImage ( <class 'NoneType'> ) :  None
			 created ( <class 'int'> ) :  1704688281374
			 lastModified ( <class 'int'> ) :  1704948571118
			 indoorMap ( <class 'dict'> ) :  {'mapRoomId': None, 'color': None}


		 (1)
			 allowed ( <class 'list'> ) :  ['w:rooms', 'd:rooms']
			 roomId ( <class 'str'> ) :  72727253-7830-47c6-be50-3b3edf60d86a
			 locationId ( <class 'str'> ) :  ec32f564-8061-453f-8ae3-cb5b541fe9f1
			 name ( <class 'str'> ) :  거실
			 backgroundImage ( <class 'NoneType'> ) :  None
			 created ( <class 'int'> ) :  1704948507226
			 lastModified ( <class 'int'> ) :  1704948507226
			 indoorMap ( <class 'dict'> ) :  {'mapRoomId': None, 'color': None}


	 _links ( <class 'NoneType'> ) : 
		 None


Response from  https://api.smartthings.com/v1/locations/ec32f564-8061-453f-8ae3-cb5b541fe9f1/modes
	 items ( <class 'list'> ) : 
		 (0)
			 id ( <class 'str'> ) :  285094c3-2999-4faf-bfe8-b04345fcea97
			 label ( <class 'str'> ) :  Away
			 name ( <class 'str'> ) :  Away
			 allowed ( <class 'list'> ) :  ['w:modes', 'd:modes']
			 lastModified ( <class 'int'> ) :  1653371510799


		 (1)
			 id ( <class 'str'> ) :  a0010235-7edf-40ec-b40e-62ec18dc4b6c
			 label ( <class 'str'> ) :  Home
			 name ( <class 'str'> ) :  Home
			 allowed ( <class 'list'> ) :  ['w:modes', 'd:modes']
			 lastModified ( <class 'int'> ) :  1653112173567


		 (2)
			 id ( <class 'str'> ) :  70feb2ce-b525-4e35-a61e-c821b87bb4f5
			 label ( <class 'str'> ) :  Night
			 name ( <class 'str'> ) :  Night
			 allowed ( <class 'list'> ) :  ['w:modes', 'd:modes']
			 lastModified ( <class 'int'> ) :  1653370558800




Response from  https://api.smartthings.com/v1/locations/6a2b7135-0400-4ef0-aef2-b7df0c0a5536
	 locationId ( <class 'str'> ) : 
		 6a2b7135-0400-4ef0-aef2-b7df0c0a5536
	 name ( <class 'str'> ) : 
		 My Company
	 countryCode ( <class 'str'> ) : 
		 USA
	 latitude ( <class 'NoneType'> ) : 
		 None
	 longitude ( <class 'NoneType'> ) : 
		 None
	 regionRadius ( <class 'NoneType'> ) : 
		 None
	 temperatureScale ( <class 'str'> ) : 
		 C
	 timeZoneId ( <class 'NoneType'> ) : 
		 None
	 locale ( <class 'str'> ) : 
		 ko
	 backgroundImage ( <class 'NoneType'> ) : 
		 None
	 additionalProperties ( <class 'dict'> ) : 
		 {}
	 allowed ( <class 'NoneType'> ) : 
		 None
	 parent ( <class 'dict'> ) : 
		 {'type': 'ACCOUNT', 'id': '1be7aec2-8533-47d4-8386-f6cf3076fe0a'}
	 created ( <class 'int'> ) : 
		 1704936454501
	 lastModified ( <class 'int'> ) : 
		 1704936454501


Response from  https://api.smartthings.com/v1/locations/6a2b7135-0400-4ef0-aef2-b7df0c0a5536/rooms
	 items ( <class 'list'> ) : 
		 []
	 _links ( <class 'NoneType'> ) : 
		 None


Response from  https://api.smartthings.com/v1/locations/6a2b7135-0400-4ef0-aef2-b7df0c0a5536/modes
	 items ( <class 'list'> ) : 
		 (0)
			 id ( <class 'str'> ) :  222c3991-acb5-4cee-a97d-ebcb09ab83f1
			 label ( <class 'str'> ) :  Away
			 name ( <class 'str'> ) :  Away
			 allowed ( <class 'list'> ) :  ['w:modes', 'd:modes']
			 lastModified ( <class 'int'> ) :  1704936454501


		 (1)
			 id ( <class 'str'> ) :  16cbbcf9-770d-453d-8c9b-10200b00f5d0
			 label ( <class 'str'> ) :  Home
			 name ( <class 'str'> ) :  Home
			 allowed ( <class 'list'> ) :  ['w:modes', 'd:modes']
			 lastModified ( <class 'int'> ) :  1704936454501


		 (2)
			 id ( <class 'str'> ) :  a35bcfa8-7854-44b7-a35c-e737a36b7066
			 label ( <class 'str'> ) :  Night
			 name ( <class 'str'> ) :  Night
			 allowed ( <class 'list'> ) :  ['w:modes', 'd:modes']
			 lastModified ( <class 'int'> ) :  1704936454501




Response from  https://api.smartthings.com/v1/devices
 items ( <class 'list'> ) : 
	 (0)
		 deviceId ( <class 'str'> ) :  d079919d-2a73-45a8-a57a-9d06bfcce8f7
		 name ( <class 'str'> ) :  switch
		 label ( <class 'str'> ) :  switch
		 manufacturerName ( <class 'str'> ) :  SmartThingsCommunity
		 presentationId ( <class 'str'> ) :  74cf66e1-ae7f-3a14-a6a8-1affef9ec321
		 locationId ( <class 'str'> ) :  ec32f564-8061-453f-8ae3-cb5b541fe9f1
		 ownerId ( <class 'str'> ) :  1bb1edd1-168f-54da-2429-3aaf64dfa095
		 roomId ( <class 'str'> ) :  2e4bc9a1-1b19-4649-a3f2-a39a63ebe702
		 components ( <class 'list'> ) :  [{'id': 'main', 'label': 'main', 'capabilities': [{'id': 'switch', 'version': 1}, {'id': 'refresh', 'version': 1}], 'categories': [{'name': 'Switch', 'categoryType': 'manufacturer'}]}]
		 createTime ( <class 'str'> ) :  2024-01-08T05:07:02.395Z
		 profile ( <class 'dict'> ) :  {'id': '71ed0734-123f-330f-886c-174466bbfe76'}
		 virtual ( <class 'dict'> ) :  {'name': 'switch', 'executingLocally': False}
		 type ( <class 'str'> ) :  VIRTUAL
		 restrictionTier ( <class 'int'> ) :  0
		 allowed ( <class 'list'> ) :  []
		 indoorMap ( <class 'dict'> ) :  {'coordinates': [0.0, 0.0, 0.0], 'rotation': [0.0, 0.0, 0.0], 'visible': False, 'data': None}
		 executionContext ( <class 'str'> ) :  CLOUD


	 (1)
		 deviceId ( <class 'str'> ) :  a0cb4e63-a10f-4a24-8685-85f1c29429b3
		 name ( <class 'str'> ) :  Virtual Device
		 label ( <class 'str'> ) :  Virtual Device
		 manufacturerName ( <class 'str'> ) :  SmartThingsCommunity
		 presentationId ( <class 'str'> ) :  62c28199-f6cd-30cb-aed3-8e80afff9379
		 locationId ( <class 'str'> ) :  6a2b7135-0400-4ef0-aef2-b7df0c0a5536
		 ownerId ( <class 'str'> ) :  1bb1edd1-168f-54da-2429-3aaf64dfa095
		 components ( <class 'list'> ) :  [{'id': 'main', 'label': 'main', 'capabilities': [{'id': 'alarm', 'version': 1}, {'id': 'refresh', 'version': 1}], 'categories': [{'name': 'Siren', 'categoryType': 'manufacturer'}]}]
		 createTime ( <class 'str'> ) :  2024-01-11T07:24:58.747Z
		 profile ( <class 'dict'> ) :  {'id': '25675b06-ef5f-323e-8ea9-60f3216d0a77'}
		 virtual ( <class 'dict'> ) :  {'name': 'Virtual Device', 'executingLocally': False}
		 type ( <class 'str'> ) :  VIRTUAL
		 restrictionTier ( <class 'int'> ) :  0
		 allowed ( <class 'list'> ) :  []
		 executionContext ( <class 'str'> ) :  CLOUD


	 (2)
		 deviceId ( <class 'str'> ) :  0630ffad-1c6a-4105-a409-927f0af28ca7
		 name ( <class 'str'> ) :  Virtual Device
		 label ( <class 'str'> ) :  Virtual Device
		 manufacturerName ( <class 'str'> ) :  SmartThingsCommunity
		 presentationId ( <class 'str'> ) :  fdf56092-02c9-3b1d-9a15-88e6ffd6e8a4
		 locationId ( <class 'str'> ) :  ec32f564-8061-453f-8ae3-cb5b541fe9f1
		 ownerId ( <class 'str'> ) :  1bb1edd1-168f-54da-2429-3aaf64dfa095
		 roomId ( <class 'str'> ) :  72727253-7830-47c6-be50-3b3edf60d86a
		 components ( <class 'list'> ) :  [{'id': 'main', 'label': 'main', 'capabilities': [{'id': 'contactSensor', 'version': 1}, {'id': 'refresh', 'version': 1}], 'categories': [{'name': 'ContactSensor', 'categoryType': 'manufacturer'}]}]
		 createTime ( <class 'str'> ) :  2024-01-11T07:25:40.387Z
		 profile ( <class 'dict'> ) :  {'id': 'b5c37a8c-31b7-3c9c-bf31-bad43d9bf23a'}
		 virtual ( <class 'dict'> ) :  {'name': 'Virtual Device', 'executingLocally': False}
		 type ( <class 'str'> ) :  VIRTUAL
		 restrictionTier ( <class 'int'> ) :  0
		 allowed ( <class 'list'> ) :  []
		 executionContext ( <class 'str'> ) :  CLOUD


	 (3)
		 deviceId ( <class 'str'> ) :  e62aa889-c278-e40d-c06a-17796a42a934
		 name ( <class 'str'> ) :  Samsung AirMonitor
		 label ( <class 'str'> ) :  에어모니터 플러스
		 manufacturerName ( <class 'str'> ) :  Samsung Electronics
		 presentationId ( <class 'str'> ) :  DA-AC-AIRSENSOR-01001
		 deviceManufacturerCode ( <class 'str'> ) :  Samsung Electronics
		 locationId ( <class 'str'> ) :  ec32f564-8061-453f-8ae3-cb5b541fe9f1
		 ownerId ( <class 'str'> ) :  1bb1edd1-168f-54da-2429-3aaf64dfa095
		 roomId ( <class 'str'> ) :  72727253-7830-47c6-be50-3b3edf60d86a
		 deviceTypeName ( <class 'str'> ) :  x.com.st.d.airqualitysensor
		 components ( <class 'list'> ) :  [{'id': 'main', 'label': 'main', 'capabilities': [{'id': 'ocf', 'version': 1}, {'id': 'execute', 'version': 1}, {'id': 'refresh', 'version': 1}, {'id': 'temperatureMeasurement', 'version': 1}, {'id': 'relativeHumidityMeasurement', 'version': 1}, {'id': 'dustSensor', 'version': 1}, {'id': 'dustHealthConcern', 'version': 1}, {'id': 'fineDustHealthConcern', 'version': 1}, {'id': 'veryFineDustSensor', 'version': 1}, {'id': 'veryFineDustHealthConcern', 'version': 1}, {'id': 'airQualitySensor', 'version': 1}, {'id': 'odorSensor', 'version': 1}, {'id': 'carbonDioxideMeasurement', 'version': 1}, {'id': 'carbonDioxideHealthConcern', 'version': 1}, {'id': 'samsungce.deviceIdentification', 'version': 1}, {'id': 'samsungce.rechargeableBattery', 'version': 1}, {'id': 'samsungce.doNotDisturb', 'version': 1}, {'id': 'samsungce.driverVersion', 'version': 1}, {'id': 'samsungce.softwareUpdate', 'version': 1}, {'id': 'custom.deviceReportStateConfiguration', 'version': 1}, {'id': 'custom.disabledCapabilities', 'version': 1}, {'id': 'sec.diagnosticsInformation', 'version': 1}], 'categories': [{'name': 'AirQualityDetector', 'categoryType': 'manufacturer'}]}]
		 createTime ( <class 'str'> ) :  2024-01-12T00:17:09.003Z
		 profile ( <class 'dict'> ) :  {'id': '1d34dd9d-6840-3df6-a6d0-5d9f4a4af2e1'}
		 ocf ( <class 'dict'> ) :  {'ocfDeviceType': 'x.com.st.d.airqualitysensor', 'name': 'Samsung AirMonitor', 'specVersion': 'core.1.1.0', 'verticalDomainSpecVersion': 'res.1.1.0,sh.1.1.0', 'manufacturerName': 'Samsung Electronics', 'modelNumber': 'ASM-KR-TP1-22-ACMB1M|10243041|75000000001611C40800020000080000', 'platformVersion': 'DAWIT 2.0', 'platformOS': 'TizenRT 4.0', 'hwVersion': 'Realtek', 'firmwareVersion': 'ASM-KR-TP1-22-ACMB1M_16221007', 'vendorId': 'DA-AC-AIRSENSOR-01001', 'vendorResourceClientServerVersion': 'MediaTek Release 221007', 'lastSignupTime': '2024-01-12T00:17:04.653024Z'}
		 type ( <class 'str'> ) :  OCF
		 restrictionTier ( <class 'int'> ) :  0
		 allowed ( <class 'list'> ) :  []
		 executionContext ( <class 'str'> ) :  CLOUD


	 (4)
		 deviceId ( <class 'str'> ) :  ad7a40ae-a057-4f58-8bbb-a0beeea3b423
		 name ( <class 'str'> ) :  Water Sensor
		 label ( <class 'str'> ) :  Water Sensor
		 manufacturerName ( <class 'str'> ) :  SmartThingsCommunity
		 presentationId ( <class 'str'> ) :  838ae989-b832-3610-968c-2940491600f6
		 locationId ( <class 'str'> ) :  ec32f564-8061-453f-8ae3-cb5b541fe9f1
		 ownerId ( <class 'str'> ) :  1bb1edd1-168f-54da-2429-3aaf64dfa095
		 roomId ( <class 'str'> ) :  2e4bc9a1-1b19-4649-a3f2-a39a63ebe702
		 components ( <class 'list'> ) :  [{'id': 'main', 'label': 'main', 'capabilities': [{'id': 'waterSensor', 'version': 1}, {'id': 'battery', 'version': 1}, {'id': 'refresh', 'version': 1}], 'categories': [{'name': 'LeakSensor', 'categoryType': 'manufacturer'}]}]
		 createTime ( <class 'str'> ) :  2024-01-08T05:35:23.072Z
		 profile ( <class 'dict'> ) :  {'id': '39230a95-d42d-34d4-a33c-f79573495a30'}
		 virtual ( <class 'dict'> ) :  {'name': 'Water Sensor', 'executingLocally': False}
		 type ( <class 'str'> ) :  VIRTUAL
		 restrictionTier ( <class 'int'> ) :  0
		 allowed ( <class 'list'> ) :  []
		 executionContext ( <class 'str'> ) :  CLOUD


	 (5)
		 deviceId ( <class 'str'> ) :  85790465-402e-43df-bd4d-3f71b2b46e6d
		 name ( <class 'str'> ) :  냉장고
		 label ( <class 'str'> ) :  냉장고
		 manufacturerName ( <class 'str'> ) :  SmartThingsCommunity
		 presentationId ( <class 'str'> ) :  a43ac549-31e0-3ccb-806a-624d90aab5ef
		 locationId ( <class 'str'> ) :  ec32f564-8061-453f-8ae3-cb5b541fe9f1
		 ownerId ( <class 'str'> ) :  1bb1edd1-168f-54da-2429-3aaf64dfa095
		 roomId ( <class 'str'> ) :  2e4bc9a1-1b19-4649-a3f2-a39a63ebe702
		 components ( <class 'list'> ) :  [{'id': 'main', 'label': 'main', 'capabilities': [{'id': 'contactSensor', 'version': 1}, {'id': 'powerConsumptionReport', 'version': 1}, {'id': 'demandResponseLoadControl', 'version': 1}, {'id': 'refresh', 'version': 1}, {'id': 'refrigeration', 'version': 1}, {'id': 'temperatureMeasurement', 'version': 1}, {'id': 'thermostatCoolingSetpoint', 'version': 1}], 'categories': [{'name': 'Refrigerator', 'categoryType': 'manufacturer'}]}, {'id': 'freezer', 'label': 'freezer', 'capabilities': [{'id': 'contactSensor', 'version': 1}, {'id': 'temperatureMeasurement', 'version': 1}, {'id': 'thermostatCoolingSetpoint', 'version': 1}], 'categories': [{'name': 'Other', 'categoryType': 'manufacturer'}]}, {'id': 'cooler', 'label': 'cooler', 'capabilities': [{'id': 'contactSensor', 'version': 1}, {'id': 'temperatureMeasurement', 'version': 1}, {'id': 'thermostatCoolingSetpoint', 'version': 1}], 'categories': [{'name': 'Other', 'categoryType': 'manufacturer'}]}, {'id': 'cvroom', 'label': 'cvroom', 'capabilities': [{'id': 'contactSensor', 'version': 1}], 'categories': [{'name': 'Other', 'categoryType': 'manufacturer'}]}, {'id': 'icemaker', 'label': 'icemaker', 'capabilities': [{'id': 'switch', 'version': 1}], 'categories': [{'name': 'Other', 'categoryType': 'manufacturer'}]}, {'id': 'icemaker-02', 'label': 'icemaker-02', 'capabilities': [{'id': 'switch', 'version': 1}], 'categories': [{'name': 'Other', 'categoryType': 'manufacturer'}]}]
		 createTime ( <class 'str'> ) :  2024-01-08T05:33:53.865Z
		 profile ( <class 'dict'> ) :  {'id': 'ab5a3095-b2e4-381a-97f3-26c4069285db'}
		 virtual ( <class 'dict'> ) :  {'name': '냉장고', 'executingLocally': False}
		 type ( <class 'str'> ) :  VIRTUAL
		 restrictionTier ( <class 'int'> ) :  0
		 allowed ( <class 'list'> ) :  []
		 indoorMap ( <class 'dict'> ) :  {'coordinates': [0.0, 0.0, 0.0], 'rotation': [0.0, 0.0, 0.0], 'visible': False, 'data': None}
		 executionContext ( <class 'str'> ) :  CLOUD


 _links ( <class 'dict'> ) : 
	 {}


Response from  https://api.smartthings.com/v1/devices/d079919d-2a73-45a8-a57a-9d06bfcce8f7/status
	 components ( <class 'dict'> ) : 
		 {'main': {'refresh': {}, 'switch': {'switch': {'value': 'off', 'timestamp': '2024-01-11T07:37:13.339Z'}}}}


Response from  https://api.smartthings.com/v1/devices/a0cb4e63-a10f-4a24-8685-85f1c29429b3/status
	 components ( <class 'dict'> ) : 
		 {'main': {'alarm': {'alarm': {'value': 'off', 'timestamp': '2024-01-11T07:24:59.520Z'}}, 'refresh': {}}}


Response from  https://api.smartthings.com/v1/devices/0630ffad-1c6a-4105-a409-927f0af28ca7/status
	 components ( <class 'dict'> ) : 
		 {'main': {'contactSensor': {'contact': {'value': 'open', 'timestamp': '2024-01-11T07:25:41.025Z'}}, 'refresh': {}}}


Response from  https://api.smartthings.com/v1/devices/e62aa889-c278-e40d-c06a-17796a42a934/status
	 components ( <class 'dict'> ) : 
		 {'main': {'samsungce.rechargeableBattery': {'chargingStatus': {'value': 'charging', 'timestamp': '2024-01-12T00:17:09.605Z'}, 'battery': {'value': 100, 'unit': '%', 'timestamp': '2024-01-12T00:17:09.605Z'}, 'resolution': {'value': 1, 'timestamp': '2024-01-12T00:17:09.605Z'}}, 'relativeHumidityMeasurement': {'humidity': {'value': 37, 'unit': '%', 'timestamp': '2024-01-12T04:27:29.313Z'}}, 'refresh': {}, 'carbonDioxideHealthConcern': {'carbonDioxideHealthConcern': {'value': 'moderate', 'timestamp': '2024-01-12T05:18:03.629Z'}}, 'execute': {'data': {'value': None}}, 'carbonDioxideMeasurement': {'carbonDioxide': {'value': 1048, 'unit': 'ppm', 'timestamp': '2024-01-12T05:43:27.957Z'}}, 'samsungce.deviceIdentification': {'micomAssayCode': {'value': None}, 'modelName': {'value': None}, 'serialNumber': {'value': None}, 'serialNumberExtra': {'value': None}, 'modelClassificationCode': {'value': None}, 'description': {'value': None}, 'binaryId': {'value': 'ASM-KR-TP1-22-ACMB1M', 'timestamp': '2024-01-12T00:17:10.146Z'}}, 'airQualitySensor': {'airQuality': {'value': 4, 'unit': 'CAQI', 'timestamp': '2024-01-12T04:41:29.537Z'}}, 'fineDustHealthConcern': {'fineDustHealthConcern': {'value': 'moderate', 'timestamp': '2024-01-12T05:43:27.957Z'}}, 'ocf': {'st': {'value': None}, 'mndt': {'value': None}, 'mnfv': {'value': 'ASM-KR-TP1-22-ACMB1M_16221007', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'mnhw': {'value': 'Realtek', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'di': {'value': 'e62aa889-c278-e40d-c06a-17796a42a934', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'mnsl': {'value': 'http://www.samsung.com', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'dmv': {'value': 'res.1.1.0,sh.1.1.0', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'n': {'value': 'Samsung AirMonitor', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'mnmo': {'value': 'ASM-KR-TP1-22-ACMB1M|10243041|75000000001611C40800020000080000', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'vid': {'value': 'DA-AC-AIRSENSOR-01001', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'mnmn': {'value': 'Samsung Electronics', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'mnml': {'value': 'http://www.samsung.com', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'mnpv': {'value': 'DAWIT 2.0', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'mnos': {'value': 'TizenRT 4.0', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'pi': {'value': 'e62aa889-c278-e40d-c06a-17796a42a934', 'timestamp': '2024-01-12T00:17:10.299Z'}, 'icv': {'value': 'core.1.1.0', 'timestamp': '2024-01-12T00:17:10.299Z'}}, 'odorSensor': {'odorLevel': {'value': 1, 'timestamp': '2024-01-12T01:31:53.299Z'}}, 'veryFineDustHealthConcern': {'veryFineDustHealthConcern': {'value': 'moderate', 'timestamp': '2024-01-12T05:43:19.038Z'}}, 'samsungce.doNotDisturb': {'settable': {'value': True, 'timestamp': '2024-01-12T00:17:09.440Z'}, 'dayOfWeek': {'value': None}, 'repeatMode': {'value': None}, 'startTime': {'value': '14:00:00Z', 'timestamp': '2024-01-12T00:17:09.440Z'}, 'endTime': {'value': '22:00:00Z', 'timestamp': '2024-01-12T00:17:09.440Z'}, 'activated': {'value': False, 'timestamp': '2024-01-12T00:17:09.440Z'}}, 'custom.disabledCapabilities': {'disabledCapabilities': {'value': [], 'timestamp': '2024-01-12T00:17:09.718Z'}}, 'samsungce.driverVersion': {'versionNumber': {'value': 22100101, 'timestamp': '2024-01-12T00:17:09.440Z'}}, 'samsungce.softwareUpdate': {'targetModule': {'value': None}, 'otnDUID': {'value': '43CGCEMP7DVRC', 'timestamp': '2024-01-12T00:17:09.718Z'}, 'lastUpdatedDate': {'value': None}, 'availableModules': {'value': [], 'timestamp': '2024-01-12T00:17:09.718Z'}, 'newVersionAvailable': {'value': False, 'timestamp': '2024-01-12T00:17:09.718Z'}, 'operatingState': {'value': None}, 'progress': {'value': None}}, 'sec.diagnosticsInformation': {'logType': {'value': ['errCode', 'dump'], 'timestamp': '2024-01-12T00:17:09.718Z'}, 'endpoint': {'value': 'SSM', 'timestamp': '2024-01-12T00:17:09.718Z'}, 'minVersion': {'value': '1.0', 'timestamp': '2024-01-12T00:17:09.718Z'}, 'signinPermission': {'value': None}, 'setupId': {'value': 'AM0', 'timestamp': '2024-01-12T00:17:09.718Z'}, 'protocolType': {'value': 'wifi_https', 'timestamp': '2024-01-12T00:17:09.718Z'}, 'tsId': {'value': None}, 'mnId': {'value': '0AJT', 'timestamp': '2024-01-12T00:17:09.718Z'}, 'dumpType': {'value': 'file', 'timestamp': '2024-01-12T00:17:09.718Z'}}, 'temperatureMeasurement': {'temperatureRange': {'value': None}, 'temperature': {'value': 22.0, 'unit': 'C', 'timestamp': '2024-01-12T04:00:15.307Z'}}, 'dustSensor': {'dustLevel': {'value': 212, 'unit': 'μg/m^3', 'timestamp': '2024-01-12T05:43:27.957Z'}, 'fineDustLevel': {'value': 35, 'unit': 'μg/m^3', 'timestamp': '2024-01-12T05:43:27.957Z'}}, 'veryFineDustSensor': {'veryFineDustLevel': {'value': 31, 'unit': 'μg/m^3', 'timestamp': '2024-01-12T05:43:27.957Z'}}, 'custom.deviceReportStateConfiguration': {'reportStateRealtimePeriod': {'value': 'disabled', 'timestamp': '2024-01-12T00:17:09.509Z'}, 'reportStateRealtime': {'value': {'state': 'enabled', 'duration': 10, 'unit': 'minute'}, 'timestamp': '2024-01-12T00:17:25.902Z'}, 'reportStatePeriod': {'value': 'enabled', 'timestamp': '2024-01-12T00:17:09.509Z'}}, 'dustHealthConcern': {'dustHealthConcern': {'value': 'veryUnhealthy', 'timestamp': '2024-01-12T04:41:29.537Z'}}}}


Response from  https://api.smartthings.com/v1/devices/ad7a40ae-a057-4f58-8bbb-a0beeea3b423/status
	 components ( <class 'dict'> ) : 
		 {'main': {'waterSensor': {'water': {'value': 'dry', 'timestamp': '2024-01-08T05:35:23.866Z'}}, 'refresh': {}, 'battery': {'battery': {'value': 100, 'unit': '%', 'timestamp': '2024-01-08T05:35:23.866Z'}}}}


Response from  https://api.smartthings.com/v1/devices/85790465-402e-43df-bd4d-3f71b2b46e6d/status
	 components ( <class 'dict'> ) : 
		 {'icemaker': {'switch': {'switch': {'value': 'on', 'timestamp': '2024-01-11T01:16:19.825Z'}}}, 'cooler': {'contactSensor': {'contact': {'value': 'closed', 'timestamp': '2024-01-08T05:33:54.594Z'}}, 'temperatureMeasurement': {'temperatureRange': {'value': {'maximum': 2168.9282940985245, 'step': 6319.640956822995, 'minimum': 2324.9483209421023}, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}, 'temperature': {'value': 4561.64739211704, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}}, 'thermostatCoolingSetpoint': {'coolingSetpointRange': {'value': {'maximum': 7323.21739687872, 'step': 7384.248065389632, 'minimum': 652.6243479043796}, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}, 'coolingSetpoint': {'value': 4241.633255095335, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}}}, 'freezer': {'contactSensor': {'contact': {'value': 'open', 'timestamp': '2024-01-08T05:33:54.594Z'}}, 'temperatureMeasurement': {'temperatureRange': {'value': {'maximum': 8755.488054617475, 'step': 8822.576463255848, 'minimum': 8641.631226738431}, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}, 'temperature': {'value': 2150.8830958158155, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}}, 'thermostatCoolingSetpoint': {'coolingSetpointRange': {'value': {'maximum': 2685.635534025356, 'step': 2392.6174239520665, 'minimum': 2053.927948455133}, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}, 'coolingSetpoint': {'value': 6364.715403290447, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}}}, 'main': {'demandResponseLoadControl': {'drlcStatus': {'value': {'duration': 70, 'start': '14040229T065000+16:53', 'override': True, 'drlcType': 0, 'drlcLevel': 0}, 'timestamp': '2024-01-08T05:33:54.594Z'}}, 'contactSensor': {'contact': {'value': 'open', 'timestamp': '2024-01-08T05:33:54.594Z'}}, 'powerConsumptionReport': {'powerConsumption': {'value': {'persistedSavedEnergy': 6.686239758875745, 'powerEnergy': 65.7569245572165, 'energySaved': 53.02279098043831, 'start': '79040229T0529:02-0226', 'end': '6400-02-29T2027:27.847Z', 'power': 32.81767687949583, 'deltaEnergy': 34.39353148066488, 'energy': 88.42973666226344, 'persistedEnergy': 76.01419296889682}, 'timestamp': '2024-01-08T05:33:54.594Z'}}, 'refrigeration': {'defrost': {'value': 'on', 'timestamp': '2024-01-08T05:33:54.594Z'}, 'rapidCooling': {'value': 'on', 'timestamp': '2024-01-08T05:33:54.594Z'}, 'rapidFreezing': {'value': 'off', 'timestamp': '2024-01-08T05:33:54.594Z'}}, 'refresh': {}, 'temperatureMeasurement': {'temperatureRange': {'value': {'maximum': 8557.067516675872, 'step': 7387.010656773914, 'minimum': 3104.4695001239147}, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}, 'temperature': {'value': 3336.643597068104, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}}, 'thermostatCoolingSetpoint': {'coolingSetpointRange': {'value': {'maximum': 9316.200115536069, 'step': 6783.652914435777, 'minimum': 8852.112007981055}, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}, 'coolingSetpoint': {'value': 9257.535564130314, 'unit': 'F', 'timestamp': '2024-01-08T05:33:54.594Z'}}}, 'cvroom': {'contactSensor': {'contact': {'value': 'closed', 'timestamp': '2024-01-08T05:33:54.594Z'}}}, 'icemaker-02': {'switch': {'switch': {'value': 'off', 'timestamp': '2024-01-08T05:36:02.048Z'}}}}


Response from  https://api.smartthings.com/v1/deviceprofiles
 items ( <class 'list'> ) : 
	 (0)
		 id ( <class 'str'> ) :  57c07c7a-4785-4af1-8198-3b8365617635
		 name ( <class 'str'> ) :  minhyuk.song_Z_Flip_3
		 metadata ( <class 'dict'> ) :  {'deviceType': 'Smart Tag', 'vid': 'ST_f6daa538-ae4a-436c-9847-fa2ace1cd312', 'mnmn': 'f3hf', 'ocfDeviceType': 'x.com.st.d.tag', 'deviceTypeId': 'Smart Tag', 'ocfSpecVer': 'core 1.1.0', 'mnid': 'f3hf', 'mnId': 'f3hf'}
		 migrationStatus ( <class 'str'> ) :  NOT_MIGRATED
		 status ( <class 'str'> ) :  DEVELOPMENT
		 preferences ( <class 'list'> ) :  []
		 components ( <class 'list'> ) :  [{'label': 'main', 'id': 'main', 'capabilities': [{'id': 'alarm', 'version': 1, 'ephemeral': False}, {'id': 'tag.tagButton', 'version': 1, 'ephemeral': False}, {'id': 'audioVolume', 'version': 1, 'ephemeral': False}, {'id': 'battery', 'version': 1, 'ephemeral': False}, {'id': 'tag.factoryReset', 'version': 1, 'ephemeral': False}, {'id': 'tag.e2eEncryption', 'version': 1, 'ephemeral': False}, {'id': 'tag.tagStatus', 'version': 1, 'ephemeral': False}, {'id': 'geolocation', 'version': 1, 'ephemeral': False}, {'id': 'geofence', 'version': 1, 'ephemeral': False}, {'id': 'tag.updatedInfo', 'version': 1, 'ephemeral': False}, {'id': 'tag.searchingStatus', 'version': 1, 'ephemeral': False}], 'categories': []}]
		 owner ( <class 'dict'> ) :  {'ownerType': 'USER', 'ownerId': '1bb1edd1-168f-54da-2429-3aaf64dfa095'}


 _links ( <class 'dict'> ) : 
	 {}


Response from  https://api.smartthings.com/v1/rules
에러 발생: 403, <Response [403]>


Response from  https://api.smartthings.com/v1/scenes
 items ( <class 'list'> ) : 
	 (0)
		 sceneId ( <class 'str'> ) :  a4b5effb-2313-4d1a-8ac6-5a0154a0d93b
		 sceneName ( <class 'str'> ) :  minhyuk 기기 제어
		 sceneIcon ( <class 'str'> ) :  153
		 sceneColor ( <class 'NoneType'> ) :  None
		 locationId ( <class 'str'> ) :  ec32f564-8061-453f-8ae3-cb5b541fe9f1
		 createdBy ( <class 'str'> ) :  1bb1edd1-168f-54da-2429-3aaf64dfa095
		 createdDate ( <class 'int'> ) :  1704847524000
		 lastUpdatedDate ( <class 'int'> ) :  1704847524000
		 lastExecutedDate ( <class 'int'> ) :  1704956425000
		 editable ( <class 'bool'> ) :  False
		 apiVersion ( <class 'str'> ) :  20200501


 _links ( <class 'dict'> ) : 
	 {'next': None, 'previous': None}


Response from  https://api.smartthings.com/v1/capabilities
 items ( <class 'list'> ) : 
	 (0)
		 id ( <class 'str'> ) :  demandResponseLoadControl
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (1)
		 id ( <class 'str'> ) :  elevatorCall
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (2)
		 id ( <class 'str'> ) :  bufferedVideoCapture
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (3)
		 id ( <class 'str'> ) :  doorControl
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (4)
		 id ( <class 'str'> ) :  fanSpeed
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (5)
		 id ( <class 'str'> ) :  firmwareUpdate
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (6)
		 id ( <class 'str'> ) :  color
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (7)
		 id ( <class 'str'> ) :  indicator
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (8)
		 id ( <class 'str'> ) :  geofence
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (9)
		 id ( <class 'str'> ) :  lockOnly
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (10)
		 id ( <class 'str'> ) :  atmosphericPressureMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (11)
		 id ( <class 'str'> ) :  dustSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (12)
		 id ( <class 'str'> ) :  activityLightingMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (13)
		 id ( <class 'str'> ) :  light
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (14)
		 id ( <class 'str'> ) :  airConditionerFanMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (15)
		 id ( <class 'str'> ) :  audioCapture
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (16)
		 id ( <class 'str'> ) :  geolocation
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (17)
		 id ( <class 'str'> ) :  hardwareFault
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (18)
		 id ( <class 'str'> ) :  colorMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (19)
		 id ( <class 'str'> ) :  energyMeter
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (20)
		 id ( <class 'str'> ) :  airPurifierFanMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (21)
		 id ( <class 'str'> ) :  formaldehydeMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (22)
		 id ( <class 'str'> ) :  healthCheck
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (23)
		 id ( <class 'str'> ) :  execute
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (24)
		 id ( <class 'str'> ) :  keypadInput
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (25)
		 id ( <class 'str'> ) :  dewPoint
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (26)
		 id ( <class 'str'> ) :  geofences
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (27)
		 id ( <class 'str'> ) :  illuminanceMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (28)
		 id ( <class 'str'> ) :  laundryWasherRinseMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (29)
		 id ( <class 'str'> ) :  drivingStatus
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (30)
		 id ( <class 'str'> ) :  filterState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (31)
		 id ( <class 'str'> ) :  audioTrackAddressing
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (32)
		 id ( <class 'str'> ) :  mediaGroup
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (33)
		 id ( <class 'str'> ) :  infraredLevel
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (34)
		 id ( <class 'str'> ) :  activitySensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (35)
		 id ( <class 'str'> ) :  actuator
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (36)
		 id ( <class 'str'> ) :  lockCodes
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (37)
		 id ( <class 'str'> ) :  lock
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (38)
		 id ( <class 'str'> ) :  feederPortion
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (39)
		 id ( <class 'str'> ) :  locationMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (40)
		 id ( <class 'str'> ) :  estimatedTimeOfArrival
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (41)
		 id ( <class 'str'> ) :  audioNotification
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (42)
		 id ( <class 'str'> ) :  gasDetector
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (43)
		 id ( <class 'str'> ) :  configuration
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (44)
		 id ( <class 'str'> ) :  battery
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (45)
		 id ( <class 'str'> ) :  languageSetting
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (46)
		 id ( <class 'str'> ) :  airFlowDirection
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  dead
		 ephemeral ( <class 'bool'> ) :  False


	 (47)
		 id ( <class 'str'> ) :  colorControl
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (48)
		 id ( <class 'str'> ) :  carbonMonoxideHealthConcern
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (49)
		 id ( <class 'str'> ) :  currentMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (50)
		 id ( <class 'str'> ) :  laundryWasherSpinSpeed
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (51)
		 id ( <class 'str'> ) :  lightControllerMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (52)
		 id ( <class 'str'> ) :  bodyMassIndexMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (53)
		 id ( <class 'str'> ) :  airQualityHealthConcern
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (54)
		 id ( <class 'str'> ) :  button
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (55)
		 id ( <class 'str'> ) :  astronomicalData
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  dead
		 ephemeral ( <class 'bool'> ) :  False


	 (56)
		 id ( <class 'str'> ) :  gasMeter
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (57)
		 id ( <class 'str'> ) :  airConditionerMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (58)
		 id ( <class 'str'> ) :  alarmSystemArmOnly
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  dead
		 ephemeral ( <class 'bool'> ) :  False


	 (59)
		 id ( <class 'str'> ) :  dishwasherMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (60)
		 id ( <class 'str'> ) :  fineDustSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (61)
		 id ( <class 'str'> ) :  accelerationSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (62)
		 id ( <class 'str'> ) :  logTrigger
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (63)
		 id ( <class 'str'> ) :  holdableButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (64)
		 id ( <class 'str'> ) :  dustHealthConcern
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (65)
		 id ( <class 'str'> ) :  bypassable
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (66)
		 id ( <class 'str'> ) :  fineDustHealthConcern
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (67)
		 id ( <class 'str'> ) :  carbonMonoxideDetector
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (68)
		 id ( <class 'str'> ) :  audioVolume
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (69)
		 id ( <class 'str'> ) :  beacon
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (70)
		 id ( <class 'str'> ) :  bridge
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (71)
		 id ( <class 'str'> ) :  dryerOperatingState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (72)
		 id ( <class 'str'> ) :  bodyWeightMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (73)
		 id ( <class 'str'> ) :  dishwasherOperationalState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (74)
		 id ( <class 'str'> ) :  humidifierMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (75)
		 id ( <class 'str'> ) :  alarmSystem
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  dead
		 ephemeral ( <class 'bool'> ) :  False


	 (76)
		 id ( <class 'str'> ) :  audioStream
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (77)
		 id ( <class 'str'> ) :  fanSpeedPercent
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (78)
		 id ( <class 'str'> ) :  alarm
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (79)
		 id ( <class 'str'> ) :  audioMute
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (80)
		 id ( <class 'str'> ) :  bulb
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  dead
		 ephemeral ( <class 'bool'> ) :  False


	 (81)
		 id ( <class 'str'> ) :  filterStatus
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (82)
		 id ( <class 'str'> ) :  consumable
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (83)
		 id ( <class 'str'> ) :  airQualitySensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (84)
		 id ( <class 'str'> ) :  contactSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (85)
		 id ( <class 'str'> ) :  cameraPreset
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (86)
		 id ( <class 'str'> ) :  imageCapture
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (87)
		 id ( <class 'str'> ) :  audioTrackData
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (88)
		 id ( <class 'str'> ) :  fanOscillationMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (89)
		 id ( <class 'str'> ) :  dishwasherOperatingState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (90)
		 id ( <class 'str'> ) :  chime
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (91)
		 id ( <class 'str'> ) :  carbonDioxideHealthConcern
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (92)
		 id ( <class 'str'> ) :  mediaController
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (93)
		 id ( <class 'str'> ) :  dryerMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (94)
		 id ( <class 'str'> ) :  colorTemperature
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (95)
		 id ( <class 'str'> ) :  feederOperatingState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (96)
		 id ( <class 'str'> ) :  carbonMonoxideMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (97)
		 id ( <class 'str'> ) :  equivalentCarbonDioxideMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (98)
		 id ( <class 'str'> ) :  garageDoorControl
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (99)
		 id ( <class 'str'> ) :  carbonDioxideMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (100)
		 id ( <class 'str'> ) :  robotCleanerTurboMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (101)
		 id ( <class 'str'> ) :  relaySwitch
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (102)
		 id ( <class 'str'> ) :  statelessCurtainPowerButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (103)
		 id ( <class 'str'> ) :  statelessFanspeedButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (104)
		 id ( <class 'str'> ) :  soundPressureLevel
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (105)
		 id ( <class 'str'> ) :  nitrogenDioxideHealthConcern
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (106)
		 id ( <class 'str'> ) :  statelessTemperatureButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (107)
		 id ( <class 'str'> ) :  statelessVolumeButtonWithRepetition
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (108)
		 id ( <class 'str'> ) :  remoteControlStatus
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (109)
		 id ( <class 'str'> ) :  securitySystem
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (110)
		 id ( <class 'str'> ) :  momentary
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (111)
		 id ( <class 'str'> ) :  statelessSetChannelButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (112)
		 id ( <class 'str'> ) :  statelessMediaPlaybackButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (113)
		 id ( <class 'str'> ) :  shockSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (114)
		 id ( <class 'str'> ) :  statelessSetChannelByNameButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (115)
		 id ( <class 'str'> ) :  temperatureMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (116)
		 id ( <class 'str'> ) :  relativeHumidityMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (117)
		 id ( <class 'str'> ) :  riceCooker
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (118)
		 id ( <class 'str'> ) :  robotCleanerState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (119)
		 id ( <class 'str'> ) :  powerConsumptionReport
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (120)
		 id ( <class 'str'> ) :  networkMeter
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (121)
		 id ( <class 'str'> ) :  statelessAirCleanerModeButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (122)
		 id ( <class 'str'> ) :  sleepSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (123)
		 id ( <class 'str'> ) :  statelessHumidifierModeButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (124)
		 id ( <class 'str'> ) :  switchLevel
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (125)
		 id ( <class 'str'> ) :  samsungTv
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (126)
		 id ( <class 'str'> ) :  presenceSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (127)
		 id ( <class 'str'> ) :  mediaPresets
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (128)
		 id ( <class 'str'> ) :  outlet
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (129)
		 id ( <class 'str'> ) :  occupancySensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (130)
		 id ( <class 'str'> ) :  radonHealthConcern
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (131)
		 id ( <class 'str'> ) :  testCapability
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (132)
		 id ( <class 'str'> ) :  precipitationMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (133)
		 id ( <class 'str'> ) :  mediaTrackControl
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (134)
		 id ( <class 'str'> ) :  robotCleanerOperatingState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (135)
		 id ( <class 'str'> ) :  robotCleanerCleaningMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (136)
		 id ( <class 'str'> ) :  soundDetection
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (137)
		 id ( <class 'str'> ) :  ocf
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (138)
		 id ( <class 'str'> ) :  statelessAudioVolumeButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (139)
		 id ( <class 'str'> ) :  thermostatCoolingSetpoint
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (140)
		 id ( <class 'str'> ) :  powerMeter
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (141)
		 id ( <class 'str'> ) :  rapidCooling
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (142)
		 id ( <class 'str'> ) :  ovenMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (143)
		 id ( <class 'str'> ) :  mediaPlayback
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (144)
		 id ( <class 'str'> ) :  ovenOperationalState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (145)
		 id ( <class 'str'> ) :  temperatureLevel
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (146)
		 id ( <class 'str'> ) :  motionSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (147)
		 id ( <class 'str'> ) :  speechSynthesis
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (148)
		 id ( <class 'str'> ) :  panicAlarm
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (149)
		 id ( <class 'str'> ) :  statelessScenes
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (150)
		 id ( <class 'str'> ) :  relativeBrightness
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (151)
		 id ( <class 'str'> ) :  samsungTV
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (152)
		 id ( <class 'str'> ) :  statelessSetChannelByContentButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (153)
		 id ( <class 'str'> ) :  pHMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (154)
		 id ( <class 'str'> ) :  statelessPowerButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (155)
		 id ( <class 'str'> ) :  sensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (156)
		 id ( <class 'str'> ) :  smokeDetector
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (157)
		 id ( <class 'str'> ) :  scent
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (158)
		 id ( <class 'str'> ) :  precipitationRate
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (159)
		 id ( <class 'str'> ) :  soundSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (160)
		 id ( <class 'str'> ) :  statelessPowerToggleButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (161)
		 id ( <class 'str'> ) :  refresh
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (162)
		 id ( <class 'str'> ) :  radonMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (163)
		 id ( <class 'str'> ) :  moldHealthConcern
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (164)
		 id ( <class 'str'> ) :  mediaInputSource
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (165)
		 id ( <class 'str'> ) :  operatingState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (166)
		 id ( <class 'str'> ) :  speechRecognition
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (167)
		 id ( <class 'str'> ) :  tV
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (168)
		 id ( <class 'str'> ) :  refrigeration
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (169)
		 id ( <class 'str'> ) :  thermostat
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (170)
		 id ( <class 'str'> ) :  statelessCustomButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (171)
		 id ( <class 'str'> ) :  odorSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (172)
		 id ( <class 'str'> ) :  statelessChannelButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (173)
		 id ( <class 'str'> ) :  statelessAudioMuteButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (174)
		 id ( <class 'str'> ) :  notification
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (175)
		 id ( <class 'str'> ) :  tamperAlert
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (176)
		 id ( <class 'str'> ) :  precipitationSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (177)
		 id ( <class 'str'> ) :  ovenOperatingState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (178)
		 id ( <class 'str'> ) :  objectDetection
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (179)
		 id ( <class 'str'> ) :  temperatureAlarm
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (180)
		 id ( <class 'str'> ) :  temperatureSetpoint
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (181)
		 id ( <class 'str'> ) :  statelessRobotCleanerToggleButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (182)
		 id ( <class 'str'> ) :  mediaPlaybackShuffle
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (183)
		 id ( <class 'str'> ) :  scenes
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (184)
		 id ( <class 'str'> ) :  statelessRobotCleanerActionButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (185)
		 id ( <class 'str'> ) :  pestControl
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (186)
		 id ( <class 'str'> ) :  statelessFanspeedModeButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (187)
		 id ( <class 'str'> ) :  ovenSetpoint
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (188)
		 id ( <class 'str'> ) :  statelessRobotCleanerHomeButton
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (189)
		 id ( <class 'str'> ) :  mediaPlaybackRepeat
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (190)
		 id ( <class 'str'> ) :  polling
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (191)
		 id ( <class 'str'> ) :  powerSource
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (192)
		 id ( <class 'str'> ) :  robotCleanerMovement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (193)
		 id ( <class 'str'> ) :  movementSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (194)
		 id ( <class 'str'> ) :  mode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (195)
		 id ( <class 'str'> ) :  refrigerationSetpoint
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (196)
		 id ( <class 'str'> ) :  signalStrength
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (197)
		 id ( <class 'str'> ) :  stepSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (198)
		 id ( <class 'str'> ) :  switch
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (199)
		 id ( <class 'str'> ) :  musicPlayer
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (200)
		 id ( <class 'str'> ) :  windSpeed
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (201)
		 id ( <class 'str'> ) :  wirelessOperatingMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (202)
		 id ( <class 'str'> ) :  windowShadeLevel
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (203)
		 id ( <class 'str'> ) :  washerMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (204)
		 id ( <class 'str'> ) :  waterSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (205)
		 id ( <class 'str'> ) :  videoCamera
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (206)
		 id ( <class 'str'> ) :  tvocMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (207)
		 id ( <class 'str'> ) :  washerOperationalState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (208)
		 id ( <class 'str'> ) :  waterMeter
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (209)
		 id ( <class 'str'> ) :  wifiMeshRouter
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (210)
		 id ( <class 'str'> ) :  waterFlowAlarm
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (211)
		 id ( <class 'str'> ) :  tvocHealthConcern
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (212)
		 id ( <class 'str'> ) :  webrtc
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (213)
		 id ( <class 'str'> ) :  windowShade
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (214)
		 id ( <class 'str'> ) :  tvChannel
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (215)
		 id ( <class 'str'> ) :  thermostatFanMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (216)
		 id ( <class 'str'> ) :  vehicleOdometer
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (217)
		 id ( <class 'str'> ) :  windMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (218)
		 id ( <class 'str'> ) :  thermostatHeatingSetpoint
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (219)
		 id ( <class 'str'> ) :  vehicleRange
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (220)
		 id ( <class 'str'> ) :  veryFineDustHealthConcern
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (221)
		 id ( <class 'str'> ) :  thermostatOperatingState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (222)
		 id ( <class 'str'> ) :  valve
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (223)
		 id ( <class 'str'> ) :  thermostatMode
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (224)
		 id ( <class 'str'> ) :  thermostatSetpoint
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (225)
		 id ( <class 'str'> ) :  vehicleTirePressureMonitor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (226)
		 id ( <class 'str'> ) :  waterUsageMeter
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (227)
		 id ( <class 'str'> ) :  thermostatSchedule
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (228)
		 id ( <class 'str'> ) :  timedSession
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (229)
		 id ( <class 'str'> ) :  windowShadePreset
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (230)
		 id ( <class 'str'> ) :  touchSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  deprecated
		 ephemeral ( <class 'bool'> ) :  False


	 (231)
		 id ( <class 'str'> ) :  tone
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (232)
		 id ( <class 'str'> ) :  threeAxis
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (233)
		 id ( <class 'str'> ) :  vehicleEngine
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (234)
		 id ( <class 'str'> ) :  washerOperatingState
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (235)
		 id ( <class 'str'> ) :  veryFineDustSensor
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (236)
		 id ( <class 'str'> ) :  videoStream
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (237)
		 id ( <class 'str'> ) :  videoCapture
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (238)
		 id ( <class 'str'> ) :  zwMultichannel
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (239)
		 id ( <class 'str'> ) :  windowShadeTiltLevel
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (240)
		 id ( <class 'str'> ) :  ultravioletIndex
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (241)
		 id ( <class 'str'> ) :  vehicleFuelLevel
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (242)
		 id ( <class 'str'> ) :  videoClips
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (243)
		 id ( <class 'str'> ) :  waterPressureMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


	 (244)
		 id ( <class 'str'> ) :  voltageMeasurement
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  live
		 ephemeral ( <class 'bool'> ) :  False


	 (245)
		 id ( <class 'str'> ) :  vehicleInformation
		 version ( <class 'int'> ) :  1
		 status ( <class 'str'> ) :  proposed
		 ephemeral ( <class 'bool'> ) :  False


 _links ( <class 'dict'> ) : 
	 {}


Response from  https://api.smartthings.com/v1/capabilities/demandResponseLoadControl/1
	 id ( <class 'str'> ) : 
		 demandResponseLoadControl
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Demand Response Load Control
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'drlcStatus': {'schema': {'type': 'object', 'properties': {'value': {'title': 'DemandResponseLoadControlStatus', 'type': 'object', 'additionalProperties': False, 'properties': {'drlcType': {'title': 'DrlcType', 'type': 'integer', 'minimum': 0, 'maximum': 1}, 'drlcLevel': {'title': 'DrlcLevel', 'type': 'integer', 'minimum': -1, 'maximum': 4}, 'start': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}, 'duration': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}, 'override': {'type': 'boolean'}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'overrideDrlcAction': {'name': 'overrideDrlcAction', 'arguments': [{'name': 'value', 'optional': False, 'schema': {'type': 'boolean'}}]}, 'requestDrlcAction': {'name': 'requestDrlcAction', 'arguments': [{'name': 'drlcType', 'optional': False, 'schema': {'title': 'DrlcType', 'type': 'integer', 'minimum': 0, 'maximum': 1}}, {'name': 'drlcLevel', 'optional': False, 'schema': {'title': 'DrlcLevel', 'type': 'integer', 'minimum': -1, 'maximum': 4}}, {'name': 'start', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, {'name': 'duration', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, {'name': 'reportingPeriod', 'optional': True, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}}


Response from  https://api.smartthings.com/v1/capabilities/elevatorCall/1
	 id ( <class 'str'> ) : 
		 elevatorCall
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Elevator Call
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'callStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['called', 'standby', 'unknown']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'call': {'name': 'call', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/bufferedVideoCapture/1
	 id ( <class 'str'> ) : 
		 bufferedVideoCapture
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Buffered Video Capture
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'clip': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'capture': {'name': 'capture', 'arguments': [{'name': 'startTime', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, {'name': 'captureTime', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, {'name': 'endTime', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/doorControl/1
	 id ( <class 'str'> ) : 
		 doorControl
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Door Control
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'door': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['closed', 'closing', 'open', 'opening', 'unknown']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'close', 'value': 'closed'}, {'command': 'open', 'value': 'open'}]}}
	 commands ( <class 'dict'> ) : 
		 {'close': {'name': 'close', 'arguments': []}, 'open': {'name': 'open', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/fanSpeed/1
	 id ( <class 'str'> ) : 
		 fanSpeed
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Fan Speed
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'fanSpeed': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setFanSpeed', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setFanSpeed': {'name': 'setFanSpeed', 'arguments': [{'name': 'speed', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}}


Response from  https://api.smartthings.com/v1/capabilities/firmwareUpdate/1
	 id ( <class 'str'> ) : 
		 firmwareUpdate
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Firmware Update
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'lastUpdateStatusReason': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'availableVersion': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'lastUpdateStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['updateSucceeded', 'updateFailed']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'state': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['normalOperation', 'updateInProgress', 'insufficientStorage', 'updateRequested']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'updateAvailable': {'schema': {'type': 'object', 'properties': {'value': {'type': 'boolean'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'currentVersion': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'lastUpdateTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'updateFirmware': {'name': 'updateFirmware', 'arguments': []}, 'checkForFirmwareUpdate': {'name': 'checkForFirmwareUpdate', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/color/1
	 id ( <class 'str'> ) : 
		 color
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Color
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'colorValue': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': False, 'properties': {'hue': {'type': 'number', 'minimum': 0.0, 'maximum': 360.0}, 'saturation': {'type': 'number', 'minimum': 0.0, 'maximum': 100.0}}}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setColorValue', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setColorValue': {'name': 'setColorValue', 'arguments': [{'name': 'colorValue', 'optional': False, 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {'hue': {'type': 'number', 'minimum': 0.0, 'maximum': 360.0}, 'saturation': {'type': 'number', 'minimum': 0.0, 'maximum': 100.0}}, 'required': ['hue', 'saturation']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/indicator/1
	 id ( <class 'str'> ) : 
		 indicator
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Indicator
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'indicatorStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['never', 'when off', 'when on']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'indicatorNever', 'value': 'never'}, {'command': 'indicatorWhenOff', 'value': 'when off'}, {'command': 'indicatorWhenOn', 'value': 'when on'}]}}
	 commands ( <class 'dict'> ) : 
		 {'indicatorNever': {'name': 'indicatorNever', 'arguments': []}, 'indicatorWhenOn': {'name': 'indicatorWhenOn', 'arguments': []}, 'indicatorWhenOff': {'name': 'indicatorWhenOff', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/geofence/1
	 id ( <class 'str'> ) : 
		 geofence
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Geofence
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'enableState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'EnableState', 'type': 'string', 'enum': ['enabled', 'disabled']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setEnableState', 'enumCommands': []}, 'geofence': {'schema': {'type': 'object', 'properties': {'value': {'title': 'GeofenceRadiusData', 'type': 'object', 'additionalProperties': False, 'properties': {'longitude': {'type': 'number'}, 'latitude': {'type': 'number'}, 'radius': {'type': 'number'}}}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setGeofence', 'enumCommands': []}, 'name': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setName', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setName': {'name': 'setName', 'arguments': [{'name': 'name', 'optional': False, 'schema': {'type': 'string'}}]}, 'setEnableState': {'name': 'setEnableState', 'arguments': [{'name': 'enableState', 'optional': False, 'schema': {'title': 'EnableState', 'type': 'string', 'enum': ['enabled', 'disabled']}}]}, 'setGeofence': {'name': 'setGeofence', 'arguments': [{'name': 'geofence', 'optional': False, 'schema': {'title': 'GeofenceRadiusData', 'type': 'object', 'additionalProperties': False, 'properties': {'longitude': {'type': 'number'}, 'latitude': {'type': 'number'}, 'radius': {'type': 'number'}}}}]}}


Response from  https://api.smartthings.com/v1/capabilities/lockOnly/1
	 id ( <class 'str'> ) : 
		 lockOnly
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Lock Only
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'lock': {'schema': {'type': 'object', 'properties': {'value': {'title': 'LockState', 'type': 'string', 'enum': ['locked', 'unknown', 'unlocked', 'unlocked with timeout']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'lock', 'value': 'locked'}]}}
	 commands ( <class 'dict'> ) : 
		 {'lock': {'name': 'lock', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/atmosphericPressureMeasurement/1
	 id ( <class 'str'> ) : 
		 atmosphericPressureMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Atmospheric Pressure Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'atmosphericPressure': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 110}, 'unit': {'type': 'string', 'enum': ['kPa'], 'default': 'kPa'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/dustSensor/1
	 id ( <class 'str'> ) : 
		 dustSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Dust Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'dustLevel': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['μg/m^3'], 'default': 'μg/m^3'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'fineDustLevel': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['μg/m^3'], 'default': 'μg/m^3'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/activityLightingMode/1
	 id ( <class 'str'> ) : 
		 activityLightingMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Activity Lighting Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'lightingMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['reading', 'writing', 'computer', 'night', 'sleepPreparation', 'day', 'cozy', 'soft']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setLightingMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setLightingMode': {'name': 'setLightingMode', 'arguments': [{'name': 'lightingMode', 'optional': False, 'schema': {'type': 'string', 'enum': ['reading', 'writing', 'computer', 'night', 'sleepPreparation', 'day', 'cozy', 'soft']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/light/1
	 id ( <class 'str'> ) : 
		 light
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Light
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'switch': {'schema': {'type': 'object', 'properties': {'value': {'title': 'SwitchState', 'type': 'string', 'enum': ['on', 'off']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'on', 'value': 'on'}, {'command': 'off', 'value': 'off'}]}}
	 commands ( <class 'dict'> ) : 
		 {'off': {'name': 'off', 'arguments': []}, 'on': {'name': 'on', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/airConditionerFanMode/1
	 id ( <class 'str'> ) : 
		 airConditionerFanMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Air Conditioner Fan Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'fanMode': {'schema': {'type': 'object', 'properties': {'value': {'maxLength': 255, 'title': 'String', 'type': 'string'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'supportedAcFanModes': {'schema': {'type': 'object', 'properties': {'value': {'items': {'type': 'string'}, 'type': 'array'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setFanMode': {'name': 'setFanMode', 'arguments': [{'name': 'fanMode', 'optional': False, 'schema': {'maxLength': 255, 'title': 'String', 'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/audioCapture/1
	 id ( <class 'str'> ) : 
		 audioCapture
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Audio Capture
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'stream': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'clip': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'capture': {'name': 'capture', 'arguments': [{'name': 'startTime', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, {'name': 'captureTime', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, {'name': 'endTime', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, {'name': 'correlationId', 'optional': True, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': 'reason', 'optional': True, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/geolocation/1
	 id ( <class 'str'> ) : 
		 geolocation
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Geolocation
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'method': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'heading': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 360}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'latitude': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'maximum': 90, 'minimum': -90}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'accuracy': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'altitudeAccuracy': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'speed': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'longitude': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'maximum': 180, 'minimum': -180}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'lastUpdateTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/hardwareFault/1
	 id ( <class 'str'> ) : 
		 hardwareFault
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Hardware Fault
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'hardwareFault': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['clear', 'detected']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/colorMode/1
	 id ( <class 'str'> ) : 
		 colorMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Color Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'colorMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['color', 'colorTemperature', 'other']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/energyMeter/1
	 id ( <class 'str'> ) : 
		 energyMeter
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Energy Meter
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'energy': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}, 'unit': {'type': 'string', 'enum': ['Wh', 'kWh', 'mWh', 'kVAh'], 'default': 'kWh'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'resetEnergyMeter': {'name': 'resetEnergyMeter', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/airPurifierFanMode/1
	 id ( <class 'str'> ) : 
		 airPurifierFanMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Air Purifier Fan Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedAirPurifierFanModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'AirPurifierFanMode', 'type': 'string', 'enum': ['auto', 'sleep', 'low', 'medium', 'high', 'quiet', 'windFree', 'off']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'airPurifierFanMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirPurifierFanMode', 'type': 'string', 'enum': ['auto', 'sleep', 'low', 'medium', 'high', 'quiet', 'windFree', 'off']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setAirPurifierFanMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setAirPurifierFanMode': {'name': 'setAirPurifierFanMode', 'arguments': [{'name': 'airPurifierFanMode', 'optional': False, 'schema': {'title': 'AirPurifierFanMode', 'type': 'string', 'enum': ['auto', 'sleep', 'low', 'medium', 'high', 'quiet', 'windFree', 'off']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/formaldehydeMeasurement/1
	 id ( <class 'str'> ) : 
		 formaldehydeMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Formaldehyde Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'formaldehydeLevel': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 1000000}, 'unit': {'type': 'string', 'enum': ['ppm', 'mg/m^3'], 'default': 'ppm'}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/healthCheck/1
	 id ( <class 'str'> ) : 
		 healthCheck
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Health Check
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'checkInterval': {'schema': {'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 604800}, 'unit': {'type': 'string', 'enum': ['s'], 'default': 's'}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'deviceScheme': {'type': 'string', 'enum': ['MIXED', 'TRACKED', 'UNTRACKED']}, 'hubHardwareId': {'type': 'string', 'pattern': '^[0-9a-fA-F]{4}$'}, 'protocol': {'title': 'DeviceHealthProtocol', 'type': 'string', 'enum': ['zigbee', 'zwave', 'bluetooth', 'lan', 'cloud', 'unknown', 'ocf', 'mqtt']}, 'offlinePingable': {'type': 'string', 'enum': ['0', '1']}, 'badProperty': {'type': 'string'}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'healthStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['online', 'offline']}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'deviceScheme': {'type': 'string', 'enum': ['MIXED', 'TRACKED', 'UNTRACKED']}, 'badProperty': {'type': 'string'}, 'reason': {'type': 'string', 'enum': ['INVALID-ACCESS-TOKEN', 'INTEGRATION-OFFLINE', 'DEVICE-OFFLINE', 'DEVICE-DELETED', 'DEVICE-UNAVAILABLE', 'DEVICE-UNDISCOVERED']}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'DeviceWatch-Enroll': {'schema': {'type': 'object', 'properties': {'value': {'title': 'DeviceHealthEnroll', 'type': 'object', 'additionalProperties': False, 'properties': {'scheme': {'type': 'string', 'enum': ['MIXED', 'TRACKED', 'UNTRACKED']}, 'protocol': {'title': 'DeviceHealthProtocol', 'type': 'string', 'enum': ['zigbee', 'zwave', 'bluetooth', 'lan', 'cloud', 'unknown', 'ocf', 'mqtt']}, 'hubHardwareId': {'title': 'String', 'type': 'string', 'maxLength': 255}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'DeviceWatch-DeviceStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['online', 'offline']}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'deviceScheme': {'type': 'string', 'enum': ['MIXED', 'TRACKED', 'UNTRACKED']}, 'badProperty': {'type': 'string'}, 'reason': {'type': 'string', 'enum': ['INVALID-ACCESS-TOKEN', 'INTEGRATION-OFFLINE', 'DEVICE-OFFLINE', 'DEVICE-DELETED', 'DEVICE-UNAVAILABLE', 'DEVICE-UNDISCOVERED']}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'ping': {'name': 'ping', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/execute/1
	 id ( <class 'str'> ) : 
		 execute
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Execute
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'data': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}, 'data': {'type': 'object', 'additionalProperties': True, 'required': []}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'execute': {'name': 'execute', 'arguments': [{'name': 'command', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': 'args', 'optional': True, 'schema': {'title': 'JsonObject', 'type': 'object'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/keypadInput/1
	 id ( <class 'str'> ) : 
		 keypadInput
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Keypad Input
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedKeyCodes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['UP', 'DOWN', 'LEFT', 'RIGHT', 'SELECT', 'BACK', 'EXIT', 'MENU', 'SETTINGS', 'HOME', 'NUMBER0', 'NUMBER1', 'NUMBER2', 'NUMBER3', 'NUMBER4', 'NUMBER5', 'NUMBER6', 'NUMBER7', 'NUMBER8', 'NUMBER9']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'sendKey': {'name': 'sendKey', 'arguments': [{'name': 'keyCode', 'optional': False, 'schema': {'type': 'string', 'enum': ['UP', 'DOWN', 'LEFT', 'RIGHT', 'SELECT', 'BACK', 'EXIT', 'MENU', 'SETTINGS', 'HOME', 'NUMBER0', 'NUMBER1', 'NUMBER2', 'NUMBER3', 'NUMBER4', 'NUMBER5', 'NUMBER6', 'NUMBER7', 'NUMBER8', 'NUMBER9']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/dewPoint/1
	 id ( <class 'str'> ) : 
		 dewPoint
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Dew Point
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'dewpoint': {'schema': {'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/geofences/1
	 id ( <class 'str'> ) : 
		 geofences
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Geofences
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'geofences': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'Geofence', 'type': 'object', 'additionalProperties': False, 'properties': {'id': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}, 'presence': {'title': 'PresenceState', 'type': 'string', 'enum': ['present', 'not present']}}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/illuminanceMeasurement/1
	 id ( <class 'str'> ) : 
		 illuminanceMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Illuminance Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'illuminance': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 100000}, 'unit': {'type': 'string', 'enum': ['lux'], 'default': 'lux'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/laundryWasherRinseMode/1
	 id ( <class 'str'> ) : 
		 laundryWasherRinseMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Laundry Washer Rinse Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'rinseMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'RinseMode', 'type': 'string', 'enum': ['none', 'normal', 'extra', 'max']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setRinseMode', 'enumCommands': []}, 'supportedRinseModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'RinseMode', 'type': 'string', 'enum': ['none', 'normal', 'extra', 'max']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setRinseMode': {'name': 'setRinseMode', 'arguments': [{'name': 'rinseMode', 'optional': False, 'schema': {'title': 'RinseMode', 'type': 'string', 'enum': ['none', 'normal', 'extra', 'max']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/drivingStatus/1
	 id ( <class 'str'> ) : 
		 drivingStatus
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Driving Status
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'drivingStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['driving', 'notDriving']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/filterState/1
	 id ( <class 'str'> ) : 
		 filterState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Filter State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'filterLifeRemaining': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/audioTrackAddressing/1
	 id ( <class 'str'> ) : 
		 audioTrackAddressing
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Audio Track Addressing
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'setAudioTrack': {'name': 'setAudioTrack', 'arguments': [{'name': 'trackToSet', 'optional': False, 'schema': {'title': 'AudioTrackAddress', 'type': 'object'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/mediaGroup/1
	 id ( <class 'str'> ) : 
		 mediaGroup
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Media Group
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'groupMute': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MuteState', 'type': 'string', 'enum': ['muted', 'unmuted']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setGroupMute', 'enumCommands': [{'command': 'muteGroup', 'value': 'muted'}, {'command': 'unmuteGroup', 'value': 'unmuted'}]}, 'groupPrimaryDeviceId': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'groupId': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'groupVolume': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setGroupVolume', 'enumCommands': []}, 'groupRole': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['primary', 'auxilary', 'ungrouped']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'groupVolumeUp': {'name': 'groupVolumeUp', 'arguments': []}, 'groupVolumeDown': {'name': 'groupVolumeDown', 'arguments': []}, 'muteGroup': {'name': 'muteGroup', 'arguments': []}, 'setGroupVolume': {'name': 'setGroupVolume', 'arguments': [{'name': 'groupVolume', 'optional': False, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 100}}]}, 'unmuteGroup': {'name': 'unmuteGroup', 'arguments': []}, 'setGroupMute': {'name': 'setGroupMute', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'title': 'MuteState', 'type': 'string', 'enum': ['muted', 'unmuted']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/infraredLevel/1
	 id ( <class 'str'> ) : 
		 infraredLevel
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Infrared Level
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'infraredLevel': {'schema': {'title': 'Percent', 'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setInfraredLevel', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setInfraredLevel': {'name': 'setInfraredLevel', 'arguments': [{'name': 'level', 'optional': False, 'schema': {'type': 'number', 'minimum': 0, 'maximum': 100}}]}}


Response from  https://api.smartthings.com/v1/capabilities/activitySensor/1
	 id ( <class 'str'> ) : 
		 activitySensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Activity Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'activity': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ActivityType', 'type': 'string', 'enum': ['noActivity', 'falling', 'lying', 'sitting', 'standing', 'eating']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/actuator/1
	 id ( <class 'str'> ) : 
		 actuator
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Actuator
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/lockCodes/1
	 id ( <class 'str'> ) : 
		 lockCodes
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Lock Codes
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'codeLength': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'setter': 'setCodeLength', 'enumCommands': []}, 'maxCodes': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'maxCodeLength': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'codeChanged': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'codeName': {'type': 'string'}}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'lock': {'schema': {'type': 'object', 'properties': {'value': {'title': 'LockState', 'type': 'string', 'enum': ['locked', 'unknown', 'unlocked', 'unlocked with timeout', 'not fully locked']}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'method': {'type': 'string', 'enum': ['manual', 'keypad', 'auto', 'command', 'rfid', 'fingerprint', 'bluetooth']}, 'codeId': {'type': 'string'}, 'codeName': {'type': 'string'}, 'timeout': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'lock', 'value': 'locked'}, {'command': 'unlock', 'value': 'unlocked'}, {'command': 'unlockWithTimeout', 'value': 'unlocked with timeout'}]}, 'minCodeLength': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'codeReport': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'scanCodes': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'lockCodes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setCodeLength': {'name': 'setCodeLength', 'arguments': [{'name': 'length', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}, 'reloadAllCodes': {'name': 'reloadAllCodes', 'arguments': []}, 'unlock': {'name': 'unlock', 'arguments': []}, 'unlockWithTimeout': {'name': 'unlockWithTimeout', 'arguments': []}, 'setCode': {'name': 'setCode', 'arguments': [{'name': 'codeSlot', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, {'name': 'codePIN', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': 'codeName', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}, 'updateCodes': {'name': 'updateCodes', 'arguments': [{'name': 'codes', 'optional': False, 'schema': {'title': 'JsonObject', 'type': 'object'}}]}, 'lock': {'name': 'lock', 'arguments': []}, 'requestCode': {'name': 'requestCode', 'arguments': [{'name': 'codeSlot', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}, 'deleteCode': {'name': 'deleteCode', 'arguments': [{'name': 'codeSlot', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}, 'nameSlot': {'name': 'nameSlot', 'arguments': [{'name': 'codeSlot', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, {'name': 'codeName', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/lock/1
	 id ( <class 'str'> ) : 
		 lock
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Lock
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'lock': {'schema': {'type': 'object', 'properties': {'value': {'title': 'LockState', 'type': 'string', 'enum': ['locked', 'unknown', 'unlocked', 'unlocked with timeout', 'not fully locked']}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'method': {'type': 'string', 'enum': ['manual', 'keypad', 'auto', 'command', 'rfid', 'fingerprint', 'bluetooth']}, 'codeId': {'type': 'string'}, 'codeName': {'type': 'string'}, 'timeout': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'lock', 'value': 'locked'}, {'command': 'unlock', 'value': 'unlocked'}]}}
	 commands ( <class 'dict'> ) : 
		 {'unlock': {'name': 'unlock', 'arguments': []}, 'lock': {'name': 'lock', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/feederPortion/1
	 id ( <class 'str'> ) : 
		 feederPortion
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Feeder Portion
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'feedPortion': {'schema': {'title': 'FeedPortion', 'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 2000}, 'unit': {'type': 'string', 'enum': ['g', 'lbs', 'oz', 'servings'], 'default': 'g'}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'setter': 'setPortion', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setPortion': {'name': 'setPortion', 'arguments': [{'name': 'portion', 'optional': False, 'schema': {'title': 'FeedPortion', 'type': 'number', 'minimum': 0, 'maximum': 2000}}, {'name': 'unit', 'optional': True, 'schema': {'title': 'unit', 'type': 'string', 'enum': ['g', 'lbs', 'oz', 'servings'], 'default': 'g'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/locationMode/1
	 id ( <class 'str'> ) : 
		 locationMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Location Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'mode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setMode': {'name': 'setMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/estimatedTimeOfArrival/1
	 id ( <class 'str'> ) : 
		 estimatedTimeOfArrival
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Estimated Time Of Arrival
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'eta': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/audioNotification/1
	 id ( <class 'str'> ) : 
		 audioNotification
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Audio Notification
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'playTrackAndResume': {'name': 'playTrackAndResume', 'arguments': [{'name': 'uri', 'optional': False, 'schema': {'title': 'URI', 'type': 'string', 'format': 'uri'}}, {'name': 'level', 'optional': True, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 100}}]}, 'playTrackAndRestore': {'name': 'playTrackAndRestore', 'arguments': [{'name': 'uri', 'optional': False, 'schema': {'title': 'URI', 'type': 'string', 'format': 'uri'}}, {'name': 'level', 'optional': True, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 100}}]}, 'playTrack': {'name': 'playTrack', 'arguments': [{'name': 'uri', 'optional': False, 'schema': {'title': 'URI', 'type': 'string', 'format': 'uri'}}, {'name': 'level', 'optional': True, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 100}}]}}


Response from  https://api.smartthings.com/v1/capabilities/gasDetector/1
	 id ( <class 'str'> ) : 
		 gasDetector
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Gas Detector
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'gas': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['clear', 'detected', 'tested']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/configuration/1
	 id ( <class 'str'> ) : 
		 configuration
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Configuration
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'configure': {'name': 'configure', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/battery/1
	 id ( <class 'str'> ) : 
		 battery
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Battery
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'battery': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/languageSetting/1
	 id ( <class 'str'> ) : 
		 languageSetting
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Language Setting
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedLanguages': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string'}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'language': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string'}}, 'additionalProperties': False, 'required': []}, 'setter': 'setLanguage', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setLanguage': {'name': 'setLanguage', 'arguments': [{'name': 'language', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/airFlowDirection/1
	 id ( <class 'str'> ) : 
		 airFlowDirection
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 dead
	 name ( <class 'str'> ) : 
		 Air Flow Direction
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'airFlowDirection': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirFlowDirection', 'type': 'string', 'enum': ['fixed', 'vertical', 'horizontal', 'all']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setAirFlowDirection': {'name': 'setAirFlowDirection', 'arguments': [{'name': 'airFlowDirection', 'optional': False, 'schema': {'title': 'AirFlowDirection', 'type': 'string', 'enum': ['fixed', 'vertical', 'horizontal', 'all']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/colorControl/1
	 id ( <class 'str'> ) : 
		 colorControl
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Color Control
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'saturation': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveNumber', 'type': 'number', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'setter': 'setSaturation', 'enumCommands': []}, 'color': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'setter': 'setColor', 'enumCommands': []}, 'hue': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveNumber', 'type': 'number', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'setter': 'setHue', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setColor': {'name': 'setColor', 'arguments': [{'name': 'color', 'optional': False, 'schema': {'title': 'COLOR_MAP', 'type': 'object', 'additionalProperties': False, 'properties': {'hue': {'type': 'number'}, 'saturation': {'type': 'number'}, 'hex': {'type': 'string', 'maxLength': 7}, 'level': {'type': 'integer'}, 'switch': {'type': 'string', 'maxLength': 3}}}}]}, 'setHue': {'name': 'setHue', 'arguments': [{'name': 'hue', 'optional': False, 'schema': {'title': 'PositiveNumber', 'type': 'number', 'minimum': 0}}]}, 'setSaturation': {'name': 'setSaturation', 'arguments': [{'name': 'saturation', 'optional': False, 'schema': {'title': 'PositiveNumber', 'type': 'number', 'minimum': 0}}]}}


Response from  https://api.smartthings.com/v1/capabilities/carbonMonoxideHealthConcern/1
	 id ( <class 'str'> ) : 
		 carbonMonoxideHealthConcern
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Carbon Monoxide Health Concern
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'carbonMonoxideHealthConcern': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirQualityHealthConcern', 'type': 'string', 'enum': ['good', 'moderate', 'slightlyUnhealthy', 'unhealthy', 'veryUnhealthy', 'hazardous']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/currentMeasurement/1
	 id ( <class 'str'> ) : 
		 currentMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Current Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'current': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Number', 'type': 'number'}, 'unit': {'type': 'string', 'enum': ['A'], 'default': 'A'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/laundryWasherSpinSpeed/1
	 id ( <class 'str'> ) : 
		 laundryWasherSpinSpeed
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Laundry Washer Spin Speed
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedSpinSpeeds': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string'}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'spinSpeed': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setSpinSpeed', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setSpinSpeed': {'name': 'setSpinSpeed', 'arguments': [{'name': 'spinSpeed', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/lightControllerMode/1
	 id ( <class 'str'> ) : 
		 lightControllerMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Light Controller Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'lightControllerMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'LightControllerMode', 'type': 'string', 'enum': ['rgbw', 'rgb', 'colorTemperature', 'dimmer']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedLightControllerModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'LightControllerMode', 'type': 'string', 'enum': ['rgbw', 'rgb', 'colorTemperature', 'dimmer']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setLightControllerMode': {'name': 'setLightControllerMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'LightControllerMode', 'type': 'string', 'enum': ['rgbw', 'rgb', 'colorTemperature', 'dimmer']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/bodyMassIndexMeasurement/1
	 id ( <class 'str'> ) : 
		 bodyMassIndexMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Body Mass Index Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'bmiMeasurement': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}, 'unit': {'type': 'string', 'enum': ['kg/m^2'], 'default': 'kg/m^2'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/airQualityHealthConcern/1
	 id ( <class 'str'> ) : 
		 airQualityHealthConcern
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Air Quality Health Concern
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'airQualityHealthConcern': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirQualityHealthConcern', 'type': 'string', 'enum': ['good', 'moderate', 'slightlyUnhealthy', 'unhealthy', 'veryUnhealthy', 'hazardous']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/button/1
	 id ( <class 'str'> ) : 
		 button
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'button': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ButtonState', 'type': 'string', 'enum': ['pushed', 'held', 'double', 'pushed_2x', 'pushed_3x', 'pushed_4x', 'pushed_5x', 'pushed_6x', 'down', 'down_2x', 'down_3x', 'down_4x', 'down_5x', 'down_6x', 'down_hold', 'up', 'up_2x', 'up_3x', 'up_4x', 'up_5x', 'up_6x', 'up_hold', 'swipe_up', 'swipe_down', 'swipe_left', 'swipe_right']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'numberOfButtons': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedButtonValues': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'ButtonState', 'type': 'string', 'enum': ['pushed', 'held', 'double', 'pushed_2x', 'pushed_3x', 'pushed_4x', 'pushed_5x', 'pushed_6x', 'down', 'down_2x', 'down_3x', 'down_4x', 'down_5x', 'down_6x', 'down_hold', 'up', 'up_2x', 'up_3x', 'up_4x', 'up_5x', 'up_6x', 'up_hold', 'swipe_up', 'swipe_down', 'swipe_left', 'swipe_right']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/astronomicalData/1
	 id ( <class 'str'> ) : 
		 astronomicalData
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 dead
	 name ( <class 'str'> ) : 
		 Astronomical Data
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'sunrise': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['true']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'sendEvent(sunrise)', 'enumCommands': []}, 'sunsetTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'setter': 'sendEvent(sunsetTime)', 'enumCommands': []}, 'sunset': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['true']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'sendEvent(sunset)', 'enumCommands': []}, 'sunriseTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'setter': 'sendEvent(sunriseTime)', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'sendEvent(sunriseTime)': {'name': 'sendEvent(sunriseTime)', 'arguments': []}, 'sendEvent(sunrise)': {'name': 'sendEvent(sunrise)', 'arguments': []}, 'sendEvent(sunset)': {'name': 'sendEvent(sunset)', 'arguments': []}, 'sendEvent(sunsetTime)': {'name': 'sendEvent(sunsetTime)', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/gasMeter/1
	 id ( <class 'str'> ) : 
		 gasMeter
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Gas Meter
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'gasMeterPrecision': {'schema': {'type': 'object', 'properties': {'value': {'title': 'GasMeterPrecision', 'type': 'object', 'additionalProperties': False, 'properties': {'volume': {'title': 'VolumePrecision', 'type': 'number'}, 'calorific': {'title': 'CalorificPrecision', 'type': 'number'}, 'conversion': {'title': 'ConversionPrecision', 'type': 'number'}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'gasMeterCalorific': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'gasMeterTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'gasMeterVolume': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}, 'unit': {'type': 'string', 'enum': ['m^3', 'cf', 'ccf'], 'default': 'm^3'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'gasMeterConversion': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'gasMeter': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}, 'unit': {'type': 'string', 'enum': ['kWh'], 'default': 'kWh'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/airConditionerMode/1
	 id ( <class 'str'> ) : 
		 airConditionerMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Air Conditioner Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedAcModes': {'schema': {'type': 'object', 'properties': {'value': {'items': {'type': 'string'}, 'type': 'array'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'airConditionerMode': {'schema': {'type': 'object', 'properties': {'value': {'maxLength': 255, 'title': 'String', 'type': 'string'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setAirConditionerMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setAirConditionerMode': {'name': 'setAirConditionerMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'maxLength': 255, 'title': 'String', 'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/alarmSystemArmOnly/1
	 id ( <class 'str'> ) : 
		 alarmSystemArmOnly
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 dead
	 name ( <class 'str'> ) : 
		 Alarm System Arm Only
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'alarmSystemStatus': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AlarmSystemState', 'type': 'string', 'enum': ['away', 'off', 'stay']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'sendEvent(alarmSystemStatus,stay)', 'value': 'stay'}, {'command': 'sendEvent(alarmSystemStatus,away)', 'value': 'away'}]}}
	 commands ( <class 'dict'> ) : 
		 {'sendEvent(alarmSystemStatus,away)': {'name': 'sendAwayEvent', 'arguments': []}, 'sendEvent(alarmSystemStatus,stay)': {'name': 'sendStayEvent', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/dishwasherMode/1
	 id ( <class 'str'> ) : 
		 dishwasherMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Dishwasher Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'dishwasherMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'DishwasherMode', 'type': 'string', 'enum': ['eco', 'intense', 'auto', 'quick', 'rinse', 'dry']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setDishwasherMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setDishwasherMode': {'name': 'setDishwasherMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'DishwasherMode', 'type': 'string', 'enum': ['eco', 'intense', 'auto', 'quick', 'rinse', 'dry']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/fineDustSensor/1
	 id ( <class 'str'> ) : 
		 fineDustSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Fine Dust Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'fineDustLevel': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['μg/m^3'], 'default': 'μg/m^3'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/accelerationSensor/1
	 id ( <class 'str'> ) : 
		 accelerationSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Acceleration Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'acceleration': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ActivityState', 'type': 'string', 'enum': ['active', 'inactive']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/logTrigger/1
	 id ( <class 'str'> ) : 
		 logTrigger
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Log Trigger
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'logState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['idle', 'inProgress']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'logRequestState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['idle', 'triggerRequired']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'logInfo': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'triggerLogWithUrl': {'name': 'triggerLogWithUrl', 'arguments': [{'name': 'url', 'optional': True, 'schema': {'title': 'URL', 'type': 'string', 'pattern': "^(https?):\\/\\/((?:[a-zA-Z0-9.-]|%[0-9A-F]{2}){3,})(?::(\\d+))?((?:\\/(?:[a-zA-Z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*)*)(?:\\?((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?$"}}]}, 'triggerLogWithLogInfo': {'name': 'triggerLogWithLogInfo', 'arguments': [{'name': 'logInfo', 'optional': False, 'schema': {'title': 'JsonObject', 'type': 'object'}}]}, 'triggerLog': {'name': 'triggerLog', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/holdableButton/1
	 id ( <class 'str'> ) : 
		 holdableButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Holdable Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'button': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['held', 'pushed']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'numberOfButtons': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/dustHealthConcern/1
	 id ( <class 'str'> ) : 
		 dustHealthConcern
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Dust Health Concern
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'dustHealthConcern': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirQualityHealthConcern', 'type': 'string', 'enum': ['good', 'moderate', 'slightlyUnhealthy', 'unhealthy', 'veryUnhealthy', 'hazardous']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/bypassable/1
	 id ( <class 'str'> ) : 
		 bypassable
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Bypassable
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'bypassStatus': {'schema': {'type': 'object', 'properties': {'value': {'title': 'BypassState', 'type': 'string', 'enum': ['ready', 'notReady', 'bypassed']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/fineDustHealthConcern/1
	 id ( <class 'str'> ) : 
		 fineDustHealthConcern
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Fine Dust Health Concern
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'fineDustHealthConcern': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirQualityHealthConcern', 'type': 'string', 'enum': ['good', 'moderate', 'slightlyUnhealthy', 'unhealthy', 'veryUnhealthy', 'hazardous']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/carbonMonoxideDetector/1
	 id ( <class 'str'> ) : 
		 carbonMonoxideDetector
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Carbon Monoxide Detector
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'carbonMonoxide': {'schema': {'type': 'object', 'properties': {'value': {'title': 'CarbonMonoxideState', 'type': 'string', 'enum': ['clear', 'detected', 'tested']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/audioVolume/1
	 id ( <class 'str'> ) : 
		 audioVolume
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Audio Volume
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'volume': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setVolume', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'volumeDown': {'name': 'volumeDown', 'arguments': []}, 'volumeUp': {'name': 'volumeUp', 'arguments': []}, 'setVolume': {'name': 'setVolume', 'arguments': [{'name': 'volume', 'optional': False, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 100}}]}}


Response from  https://api.smartthings.com/v1/capabilities/beacon/1
	 id ( <class 'str'> ) : 
		 beacon
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Beacon
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'presence': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PresenceState', 'type': 'string', 'enum': ['present', 'not present']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/bridge/1
	 id ( <class 'str'> ) : 
		 bridge
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Bridge
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/dryerOperatingState/1
	 id ( <class 'str'> ) : 
		 dryerOperatingState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Dryer Operating State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'completionTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'machineState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setMachineState', 'enumCommands': []}, 'supportedMachineStates': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'dryerJobState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'DryerJobState', 'type': 'string', 'enum': ['cooling', 'delayWash', 'drying', 'finished', 'none', 'refreshing', 'weightSensing', 'wrinklePrevent', 'dehumidifying', 'aIDrying', 'sanitizing', 'internalCare', 'freezeProtection', 'continuousDehumidifying', 'thawingFrozenInside']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setMachineState': {'name': 'setMachineState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/bodyWeightMeasurement/1
	 id ( <class 'str'> ) : 
		 bodyWeightMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Body Weight Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'bodyWeightMeasurement': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}, 'unit': {'type': 'string', 'enum': ['kg', 'lbs', '斤'], 'default': 'kg'}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/dishwasherOperationalState/1
	 id ( <class 'str'> ) : 
		 dishwasherOperationalState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Dishwasher Operational State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'completionTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'machineState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setMachineState', 'enumCommands': []}, 'supportedMachineStates': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'dishwasherJobState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'DishwasherJobState', 'type': 'string', 'enum': ['airwash', 'cooling', 'drying', 'finish', 'preDrain', 'prewash', 'rinse', 'spin', 'unknown', 'wash', 'wrinklePrevent']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setMachineState': {'name': 'setMachineState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/humidifierMode/1
	 id ( <class 'str'> ) : 
		 humidifierMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Humidifier Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'humidifierMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'HumidifierMode', 'type': 'string', 'enum': ['auto', 'low', 'medium', 'high']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setHumidifierMode': {'name': 'setHumidifierMode', 'arguments': [{'name': 'humidifierMode', 'optional': False, 'schema': {'title': 'HumidifierMode', 'type': 'string', 'enum': ['auto', 'low', 'medium', 'high']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/alarmSystem/1
	 id ( <class 'str'> ) : 
		 alarmSystem
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 dead
	 name ( <class 'str'> ) : 
		 Alarm System
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'alarmSystemStatus': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AlarmSystemState', 'type': 'string', 'enum': ['away', 'off', 'stay']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'sendEvent(alarmSystemStatus,off)', 'value': 'off'}, {'command': 'sendEvent(alarmSystemStatus,stay)', 'value': 'stay'}, {'command': 'sendEvent(alarmSystemStatus,away)', 'value': 'away'}]}}
	 commands ( <class 'dict'> ) : 
		 {'sendEvent(alarmSystemStatus,off)': {'name': 'sendOffEvent', 'arguments': []}, 'sendEvent(alarmSystemStatus,away)': {'name': 'sendAwayEvent', 'arguments': []}, 'sendEvent(alarmSystemStatus,stay)': {'name': 'sendStayEvent', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/audioStream/1
	 id ( <class 'str'> ) : 
		 audioStream
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Audio Stream
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'uri': {'schema': {'type': 'object', 'properties': {'value': {'title': 'URI', 'type': 'string', 'format': 'uri'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'startAudio': {'name': 'startAudio', 'arguments': []}, 'stopAudio': {'name': 'stopAudio', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/fanSpeedPercent/1
	 id ( <class 'str'> ) : 
		 fanSpeedPercent
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Fan Speed Percent
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'percent': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setPercent', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setPercent': {'name': 'setPercent', 'arguments': [{'name': 'percent', 'optional': False, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 100}}]}}


Response from  https://api.smartthings.com/v1/capabilities/alarm/1
	 id ( <class 'str'> ) : 
		 alarm
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Alarm
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'alarm': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AlertState', 'type': 'string', 'enum': ['both', 'off', 'siren', 'strobe']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'both', 'value': 'both'}, {'command': 'off', 'value': 'off'}, {'command': 'siren', 'value': 'siren'}, {'command': 'strobe', 'value': 'strobe'}]}}
	 commands ( <class 'dict'> ) : 
		 {'siren': {'name': 'siren', 'arguments': []}, 'strobe': {'name': 'strobe', 'arguments': []}, 'off': {'name': 'off', 'arguments': []}, 'both': {'name': 'both', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/audioMute/1
	 id ( <class 'str'> ) : 
		 audioMute
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Audio Mute
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'mute': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MuteState', 'type': 'string', 'enum': ['muted', 'unmuted']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setMute', 'enumCommands': [{'command': 'mute', 'value': 'muted'}, {'command': 'unmute', 'value': 'unmuted'}]}}
	 commands ( <class 'dict'> ) : 
		 {'setMute': {'name': 'setMute', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'title': 'MuteState', 'type': 'string', 'enum': ['muted', 'unmuted']}}]}, 'mute': {'name': 'mute', 'arguments': []}, 'unmute': {'name': 'unmute', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/bulb/1
	 id ( <class 'str'> ) : 
		 bulb
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 dead
	 name ( <class 'str'> ) : 
		 Bulb
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'switch': {'schema': {'type': 'object', 'properties': {'value': {'title': 'SwitchState', 'type': 'string', 'enum': ['on', 'off']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'off', 'value': 'off'}, {'command': 'on', 'value': 'on'}]}}
	 commands ( <class 'dict'> ) : 
		 {'off': {'name': 'off', 'arguments': []}, 'on': {'name': 'on', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/filterStatus/1
	 id ( <class 'str'> ) : 
		 filterStatus
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Filter Status
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'filterStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['normal', 'replace']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/consumable/1
	 id ( <class 'str'> ) : 
		 consumable
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Consumable
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'consumableStatus': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ConsumableState', 'type': 'string', 'enum': ['good', 'maintenance_required', 'missing', 'order', 'replace']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setConsumableStatus', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setConsumableStatus': {'name': 'setConsumableStatus', 'arguments': [{'name': 'status', 'optional': False, 'schema': {'title': 'ConsumableState', 'type': 'string', 'enum': ['good', 'maintenance_required', 'missing', 'order', 'replace']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/airQualitySensor/1
	 id ( <class 'str'> ) : 
		 airQualitySensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Air Quality Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'airQuality': {'schema': {'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['CAQI'], 'default': 'CAQI'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/contactSensor/1
	 id ( <class 'str'> ) : 
		 contactSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Contact Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'contact': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ContactState', 'type': 'string', 'enum': ['closed', 'open']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/cameraPreset/1
	 id ( <class 'str'> ) : 
		 cameraPreset
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Camera Preset
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'presets': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'Camera Preset', 'type': 'object', 'additionalProperties': False, 'properties': {'name': {'type': 'string'}, 'id': {'type': 'string'}, 'data': {'title': 'JsonObject', 'type': 'object'}}, 'required': ['name', 'id', 'data']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'create': {'name': 'create', 'arguments': [{'name': 'name', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': 'id', 'optional': True, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': 'data', 'optional': True, 'schema': {'title': 'JsonObject', 'type': 'object'}}]}, 'update': {'name': 'update', 'arguments': [{'name': 'id', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': 'name', 'optional': True, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': 'data', 'optional': True, 'schema': {'title': 'JsonObject', 'type': 'object'}}]}, 'execute': {'name': 'execute', 'arguments': [{'name': 'id', 'optional': False, 'schema': {'type': 'string'}}]}, 'delete': {'name': 'delete', 'arguments': [{'name': 'id', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/imageCapture/1
	 id ( <class 'str'> ) : 
		 imageCapture
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Image Capture
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'image': {'schema': {'type': 'object', 'properties': {'value': {'title': 'URL', 'type': 'string', 'pattern': "^(https?):\\/\\/((?:[a-zA-Z0-9.-]|%[0-9A-F]{2}){3,})(?::(\\d+))?((?:\\/(?:[a-zA-Z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*)*)(?:\\?((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?$"}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'take', 'enumCommands': []}, 'encrypted': {'schema': {'type': 'object', 'properties': {'value': {'type': 'boolean'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'captureTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'take': {'name': 'take', 'arguments': [{'name': 'correlationId', 'optional': True, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': 'reason', 'optional': True, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/audioTrackData/1
	 id ( <class 'str'> ) : 
		 audioTrackData
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Audio Track Data
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'totalTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'audioTrackData': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AudioTrackData', 'type': 'object', 'additionalProperties': False, 'properties': {'title': {'title': 'String', 'type': 'string', 'maxLength': 255}, 'artist': {'title': 'String', 'type': 'string', 'maxLength': 255}, 'album': {'title': 'String', 'type': 'string', 'maxLength': 255}, 'albumArtUrl': {'title': 'URI', 'type': 'string', 'format': 'uri'}, 'mediaSource': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'required': ['title']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'elapsedTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/fanOscillationMode/1
	 id ( <class 'str'> ) : 
		 fanOscillationMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Fan Oscillation Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedFanOscillationModes': {'schema': {'type': 'object', 'properties': {'value': {'items': {'title': 'FanOscillationMode', 'type': 'string', 'enum': ['off', 'individual', 'fixed', 'vertical', 'horizontal', 'all', 'indirect', 'direct', 'fixedCenter', 'fixedLeft', 'fixedRight', 'far', 'wide', 'mid', 'spot', 'swing']}, 'type': 'array'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'fanOscillationMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'FanOscillationMode', 'type': 'string', 'enum': ['off', 'individual', 'fixed', 'vertical', 'horizontal', 'all', 'indirect', 'direct', 'fixedCenter', 'fixedLeft', 'fixedRight', 'far', 'wide', 'mid', 'spot', 'swing']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setFanOscillationMode': {'name': 'setFanOscillationMode', 'arguments': [{'name': 'fanOscillationMode', 'optional': False, 'schema': {'title': 'FanOscillationMode', 'type': 'string', 'enum': ['off', 'individual', 'fixed', 'vertical', 'horizontal', 'all', 'indirect', 'direct', 'fixedCenter', 'fixedLeft', 'fixedRight', 'far', 'wide', 'mid', 'spot', 'swing']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/dishwasherOperatingState/1
	 id ( <class 'str'> ) : 
		 dishwasherOperatingState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Dishwasher Operating State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'completionTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'machineState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setMachineState', 'enumCommands': []}, 'supportedMachineStates': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'dishwasherJobState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'DishwasherJobState', 'type': 'string', 'enum': ['airwash', 'cooling', 'drying', 'finish', 'preDrain', 'prewash', 'rinse', 'spin', 'unknown', 'wash', 'wrinklePrevent']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setMachineState': {'name': 'setMachineState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/chime/1
	 id ( <class 'str'> ) : 
		 chime
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Chime
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'chime': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['chime', 'off']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'chime', 'value': 'chime'}, {'command': 'off', 'value': 'off'}]}}
	 commands ( <class 'dict'> ) : 
		 {'off': {'name': 'off', 'arguments': []}, 'chime': {'name': 'chime', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/carbonDioxideHealthConcern/1
	 id ( <class 'str'> ) : 
		 carbonDioxideHealthConcern
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Carbon Dioxide Health Concern
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'carbonDioxideHealthConcern': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirQualityHealthConcern', 'type': 'string', 'enum': ['good', 'moderate', 'slightlyUnhealthy', 'unhealthy', 'veryUnhealthy', 'hazardous']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/mediaController/1
	 id ( <class 'str'> ) : 
		 mediaController
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Media Controller
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'currentActivity': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'activities': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'startActivity': {'name': 'startActivity', 'arguments': [{'name': 'activityId', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/dryerMode/1
	 id ( <class 'str'> ) : 
		 dryerMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Dryer Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'dryerMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'DryerMode', 'type': 'string', 'enum': ['regular', 'lowHeat', 'highHeat']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setDryerMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setDryerMode': {'name': 'setDryerMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'DryerMode', 'type': 'string', 'enum': ['regular', 'lowHeat', 'highHeat']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/colorTemperature/1
	 id ( <class 'str'> ) : 
		 colorTemperature
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Color Temperature
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'colorTemperatureRange': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': False, 'properties': {'minimum': {'type': 'integer', 'minimum': 1, 'maximum': 30000}, 'maximum': {'type': 'integer', 'minimum': 1, 'maximum': 30000}, 'step': {'type': 'integer', 'minimum': 1, 'maximum': 30000}}, 'required': ['minimum', 'maximum']}, 'unit': {'type': 'string', 'enum': ['K'], 'default': 'K'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'colorTemperature': {'schema': {'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 1, 'maximum': 30000}, 'unit': {'type': 'string', 'enum': ['K'], 'default': 'K'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setColorTemperature', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setColorTemperature': {'name': 'setColorTemperature', 'arguments': [{'name': 'temperature', 'optional': False, 'schema': {'type': 'integer', 'minimum': 1, 'maximum': 30000}}]}}


Response from  https://api.smartthings.com/v1/capabilities/feederOperatingState/1
	 id ( <class 'str'> ) : 
		 feederOperatingState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Feeder Operating State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'feederOperatingState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['idle', 'feeding', 'error']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'startFeeding', 'value': 'feeding'}]}}
	 commands ( <class 'dict'> ) : 
		 {'startFeeding': {'name': 'startFeeding', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/carbonMonoxideMeasurement/1
	 id ( <class 'str'> ) : 
		 carbonMonoxideMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Carbon Monoxide Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'carbonMonoxideLevel': {'schema': {'type': 'object', 'properties': {'value': {'minimum': 0, 'type': 'number', 'maximum': 1000000}, 'unit': {'type': 'string', 'enum': ['ppm'], 'default': 'ppm'}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/equivalentCarbonDioxideMeasurement/1
	 id ( <class 'str'> ) : 
		 equivalentCarbonDioxideMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Equivalent Carbon Dioxide Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'equivalentCarbonDioxideMeasurement': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 1000000}, 'unit': {'type': 'string', 'enum': ['ppm'], 'default': 'ppm'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/garageDoorControl/1
	 id ( <class 'str'> ) : 
		 garageDoorControl
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Garage Door Control
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'door': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['closed', 'closing', 'open', 'opening', 'unknown']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'close', 'value': 'closed'}, {'command': 'open', 'value': 'open'}]}}
	 commands ( <class 'dict'> ) : 
		 {'close': {'name': 'close', 'arguments': []}, 'open': {'name': 'open', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/carbonDioxideMeasurement/1
	 id ( <class 'str'> ) : 
		 carbonDioxideMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Carbon Dioxide Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'carbonDioxide': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 1000000}, 'unit': {'type': 'string', 'enum': ['ppm'], 'default': 'ppm'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/robotCleanerTurboMode/1
	 id ( <class 'str'> ) : 
		 robotCleanerTurboMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Robot Cleaner Turbo Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'robotCleanerTurboMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['on', 'off', 'silence', 'extraSilence']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setRobotCleanerTurboMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setRobotCleanerTurboMode': {'name': 'setRobotCleanerTurboMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'type': 'string', 'enum': ['on', 'off', 'silence', 'extraSilence']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/relaySwitch/1
	 id ( <class 'str'> ) : 
		 relaySwitch
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Relay Switch
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'switch': {'schema': {'type': 'object', 'properties': {'value': {'title': 'SwitchState', 'type': 'string', 'enum': ['on', 'off']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'on', 'value': 'on'}, {'command': 'off', 'value': 'off'}]}}
	 commands ( <class 'dict'> ) : 
		 {'off': {'name': 'off', 'arguments': []}, 'on': {'name': 'on', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/statelessCurtainPowerButton/1
	 id ( <class 'str'> ) : 
		 statelessCurtainPowerButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Curtain Power Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableCurtainPowerButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['open', 'close', 'pause']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['open', 'close', 'pause']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/statelessFanspeedButton/1
	 id ( <class 'str'> ) : 
		 statelessFanspeedButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Stateless Fanspeed Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableFanspeedButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['fanspeedUp', 'fanspeedDown']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['fanspeedUp', 'fanspeedDown']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/soundPressureLevel/1
	 id ( <class 'str'> ) : 
		 soundPressureLevel
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Sound Pressure Level
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'soundPressureLevel': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 194}, 'unit': {'type': 'string', 'enum': ['dB'], 'default': 'dB'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/nitrogenDioxideHealthConcern/1
	 id ( <class 'str'> ) : 
		 nitrogenDioxideHealthConcern
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Nitrogen Dioxide Health Concern
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'nitrogenDioxideHealthConcern': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirQualityHealthConcern', 'type': 'string', 'enum': ['good', 'moderate', 'slightlyUnhealthy', 'unhealthy', 'veryUnhealthy', 'hazardous']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/statelessTemperatureButton/1
	 id ( <class 'str'> ) : 
		 statelessTemperatureButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Stateless Temperature Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableTemperatureButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['temperatureUp', 'temperatureDown']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['temperatureUp', 'temperatureDown']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/statelessVolumeButtonWithRepetition/1
	 id ( <class 'str'> ) : 
		 statelessVolumeButtonWithRepetition
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Volume Button With Repetition
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'volumeDown': {'name': 'volumeDown', 'arguments': [{'name': 'repetition', 'optional': False, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 10}}]}, 'volumeUp': {'name': 'volumeUp', 'arguments': [{'name': 'repetition', 'optional': False, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 10}}]}}


Response from  https://api.smartthings.com/v1/capabilities/remoteControlStatus/1
	 id ( <class 'str'> ) : 
		 remoteControlStatus
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Remote Control Status
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'remoteControlEnabled': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['false', 'true']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/securitySystem/1
	 id ( <class 'str'> ) : 
		 securitySystem
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Security System
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'sensorStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['ready', 'bypassedNotReady']}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'openSensors': {'type': 'array', 'items': {'type': 'object', 'additionalProperties': False, 'properties': {'name': {'title': 'String', 'type': 'string', 'maxLength': 255}, 'status': {'type': 'string', 'enum': ['open', 'unlocked', 'unresponsive', 'other']}, 'externalId': {'title': 'String', 'type': 'string', 'maxLength': 255}}}}}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'alarm': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'securitySystemStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['armedAway', 'armedStay', 'disarmed']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'armStay', 'value': 'armedStay'}, {'command': 'armAway', 'value': 'armedAway'}, {'command': 'disarm', 'value': 'disarmed'}]}}
	 commands ( <class 'dict'> ) : 
		 {'armStay': {'name': 'armStay', 'arguments': [{'name': 'bypassAll', 'optional': True, 'schema': {'type': 'boolean'}}]}, 'disarm': {'name': 'disarm', 'arguments': []}, 'armAway': {'name': 'armAway', 'arguments': [{'name': 'bypassAll', 'optional': True, 'schema': {'type': 'boolean'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/momentary/1
	 id ( <class 'str'> ) : 
		 momentary
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Momentary
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'push': {'name': 'push', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/statelessSetChannelButton/1
	 id ( <class 'str'> ) : 
		 statelessSetChannelButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Set Channel Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'setChannel': {'name': 'setChannel', 'arguments': [{'name': 'channel', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/statelessMediaPlaybackButton/1
	 id ( <class 'str'> ) : 
		 statelessMediaPlaybackButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Media Playback Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableMediaPlaybackButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'MediaPlaybackCommands', 'type': 'string', 'enum': ['pause', 'play', 'stop', 'fastForward', 'rewind']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'title': 'MediaPlaybackCommands', 'type': 'string', 'enum': ['pause', 'play', 'stop', 'fastForward', 'rewind']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/shockSensor/1
	 id ( <class 'str'> ) : 
		 shockSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Shock Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'shock': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['clear', 'detected']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/statelessSetChannelByNameButton/1
	 id ( <class 'str'> ) : 
		 statelessSetChannelByNameButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Set Channel By Name Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'setChannelByName': {'name': 'setChannelByName', 'arguments': [{'name': 'channel', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/temperatureMeasurement/1
	 id ( <class 'str'> ) : 
		 temperatureMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Temperature Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'temperatureRange': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': False, 'properties': {'minimum': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'maximum': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'step': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}}, 'required': ['minimum', 'maximum']}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}, 'temperature': {'schema': {'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/relativeHumidityMeasurement/1
	 id ( <class 'str'> ) : 
		 relativeHumidityMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Relative Humidity Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'humidity': {'schema': {'title': 'Percent', 'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/riceCooker/1
	 id ( <class 'str'> ) : 
		 riceCooker
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Rice Cooker
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'completionTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'schedulingEnabled': {'schema': {'type': 'object', 'properties': {'value': {'type': 'boolean'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'scheduledTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'cookerState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['ready', 'running', 'scheduled', 'error']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'supportedCookerModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['cooking', 'keepWarm', 'reheating', 'autoClean', 'soakInnerPot']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'schedulableMenus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'RiceCookerMenu', 'type': 'string', 'enum': ['stickyPlainRice', 'wellCookedPlainRice', 'frozenPlainRice', 'mixedGrains', 'brownRice100', 'riceWithBeans', 'barleyMixedGrainRice', 'superGrains', 'frozenMixedGrain', 'cauldronRice', 'riceForGimbap', 'plainQuick', 'konjacRice', 'mixedGrainForSalad', 'mixedGrainsQuick', 'nutritiousRiceInHotPot', 'steamedDish', 'nutritiousPorridge', 'scorchedRiceTea', 'bakedEgg', 'sousVide', 'scorchedRice', 'babyFoodStep1', 'babyFoodStep2', 'babyFoodStep3', 'riceWithSeasonedVegetablesInHotPot', 'mixedGrainForSlim', 'mixedGrainForVitality', 'haedeul', 'alchanmi', 'odaemi', 'oatRice', 'chickpeaRice', 'quinoaRice', 'lentilBeanRice', 'steamedSweetPotato', 'galbijjim', 'samgyetang', 'riceWithWebfootOctopusAndSaussureaInHotPot', 'riceWithAbaloneInHotPot', 'riceWithTruffledBulgogiInHotPot', 'riceWithSteakInHotPot', 'riceWithRipeKimchiAndAbaloneInHotPot', 'riceWithBeefAndBeanSproutsInHotPot', 'riceWithAssortedMushrommsInHotPot', 'riceWithBrackenAndSteakInHotPot', 'riceWithBeefAndAssortedMushroomsInHotPot', 'riceWithSpicyWebfootOctopusInHotPot', 'kamutRice', 'mixedGrainForSaladWithLentilBean', 'mixedGrainForSaladWithChickpea(1Cup)', 'mixedGrainForSaladWithQuinoa', 'mixedGrainForSaladWithMillet', 'mixedGrainForSaladWithChickpea(2Cup)', 'mixedGrainForSaladWithBarley', 'mixedGrainForSaladWithBrownRice(1Cup)', 'mixedGrainForSaladWithOatRice', 'mixedGrainForSaladWithBrownRice(2Cup)', 'mixedGrainForSaladWithKamut', 'mixedGrainForSaladWithBrownRice', 'mixedGrainForSaladWithQuinoa(1Cup)', 'mixedGrainForSaladWithChickpea', 'mixedGrainForSaladWithQuinoa(2Cup)', 'mixedGrainForSaladWithAdlay', 'mixedGrainForSaladWithLentilBean(1Cup)', 'plainPorridge', 'mixedGrainForSaladWithLentilBean(2Cup)', 'abalonePorridge', 'pineNutPorridge', 'boiledEgg', 'chicken,SweetPumpkin,Cabbage,StickyRicePorridge', 'chicken,Zucchini,SweetPotato,StickyRicePorridge', 'beef,Apple,BroccoliPorridge', 'chicken,BokChoy,BananaPorridge', 'beef,Zucchini,PearPorridge', 'beef,ShiitakeMushroom,EggPorridge', 'beef,KingTrumpetMushroom,BroccoliPorridge', 'chicken,BeanSprouts,Jujube,StickyRicePorridge', 'cod-Meat,Vitamin,CarrotPorridge', 'chicken,SweetPotato,Beet,BeetPorridge', 'chicken,PineNut,Chestnut,Spinach,SoftBoiledRice', 'beef,Beet,EnokiMushroom,PerillaSeeds,SoftBoiledRice', 'chicken,Cheese,Beet,Eggplant,SoftBoiledRice', 'codFlesh,SweetPumpkin,Mung-BeanSprouts,BlackSesame,SoftBoiledRice', 'beef,Cabbage,WhiteMushroom,Jujube,SoftBoiledRice', 'broccoliPorridge', 'potatoCarrotPorridge', 'yakbab', 'steamedPotato', 'customMenu01', 'customMenu02', 'customMenu03', 'customMenu04', 'customMenu05', 'customMenu06', 'customMenu07', 'customMenu08', 'customMenu09', 'customMenu10', 'customMenu11', 'customMenu12', 'customMenu13', 'customMenu14', 'customMenu15', 'customMenu16', 'customMenu17', 'customMenu18', 'customMenu19', 'customMenu20']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'startTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'cookerMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['cooking', 'keepWarm', 'reheating', 'autoClean', 'soakInnerPot']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setMode', 'enumCommands': []}, 'menu': {'schema': {'type': 'object', 'properties': {'value': {'title': 'RiceCookerMenu', 'type': 'string', 'enum': ['stickyPlainRice', 'wellCookedPlainRice', 'frozenPlainRice', 'mixedGrains', 'brownRice100', 'riceWithBeans', 'barleyMixedGrainRice', 'superGrains', 'frozenMixedGrain', 'cauldronRice', 'riceForGimbap', 'plainQuick', 'konjacRice', 'mixedGrainForSalad', 'mixedGrainsQuick', 'nutritiousRiceInHotPot', 'steamedDish', 'nutritiousPorridge', 'scorchedRiceTea', 'bakedEgg', 'sousVide', 'scorchedRice', 'babyFoodStep1', 'babyFoodStep2', 'babyFoodStep3', 'riceWithSeasonedVegetablesInHotPot', 'mixedGrainForSlim', 'mixedGrainForVitality', 'haedeul', 'alchanmi', 'odaemi', 'oatRice', 'chickpeaRice', 'quinoaRice', 'lentilBeanRice', 'steamedSweetPotato', 'galbijjim', 'samgyetang', 'riceWithWebfootOctopusAndSaussureaInHotPot', 'riceWithAbaloneInHotPot', 'riceWithTruffledBulgogiInHotPot', 'riceWithSteakInHotPot', 'riceWithRipeKimchiAndAbaloneInHotPot', 'riceWithBeefAndBeanSproutsInHotPot', 'riceWithAssortedMushrommsInHotPot', 'riceWithBrackenAndSteakInHotPot', 'riceWithBeefAndAssortedMushroomsInHotPot', 'riceWithSpicyWebfootOctopusInHotPot', 'kamutRice', 'mixedGrainForSaladWithLentilBean', 'mixedGrainForSaladWithChickpea(1Cup)', 'mixedGrainForSaladWithQuinoa', 'mixedGrainForSaladWithMillet', 'mixedGrainForSaladWithChickpea(2Cup)', 'mixedGrainForSaladWithBarley', 'mixedGrainForSaladWithBrownRice(1Cup)', 'mixedGrainForSaladWithOatRice', 'mixedGrainForSaladWithBrownRice(2Cup)', 'mixedGrainForSaladWithKamut', 'mixedGrainForSaladWithBrownRice', 'mixedGrainForSaladWithQuinoa(1Cup)', 'mixedGrainForSaladWithChickpea', 'mixedGrainForSaladWithQuinoa(2Cup)', 'mixedGrainForSaladWithAdlay', 'mixedGrainForSaladWithLentilBean(1Cup)', 'plainPorridge', 'mixedGrainForSaladWithLentilBean(2Cup)', 'abalonePorridge', 'pineNutPorridge', 'boiledEgg', 'chicken,SweetPumpkin,Cabbage,StickyRicePorridge', 'chicken,Zucchini,SweetPotato,StickyRicePorridge', 'beef,Apple,BroccoliPorridge', 'chicken,BokChoy,BananaPorridge', 'beef,Zucchini,PearPorridge', 'beef,ShiitakeMushroom,EggPorridge', 'beef,KingTrumpetMushroom,BroccoliPorridge', 'chicken,BeanSprouts,Jujube,StickyRicePorridge', 'cod-Meat,Vitamin,CarrotPorridge', 'chicken,SweetPotato,Beet,BeetPorridge', 'chicken,PineNut,Chestnut,Spinach,SoftBoiledRice', 'beef,Beet,EnokiMushroom,PerillaSeeds,SoftBoiledRice', 'chicken,Cheese,Beet,Eggplant,SoftBoiledRice', 'codFlesh,SweetPumpkin,Mung-BeanSprouts,BlackSesame,SoftBoiledRice', 'beef,Cabbage,WhiteMushroom,Jujube,SoftBoiledRice', 'broccoliPorridge', 'potatoCarrotPorridge', 'yakbab', 'steamedPotato', 'customMenu01', 'customMenu02', 'customMenu03', 'customMenu04', 'customMenu05', 'customMenu06', 'customMenu07', 'customMenu08', 'customMenu09', 'customMenu10', 'customMenu11', 'customMenu12', 'customMenu13', 'customMenu14', 'customMenu15', 'customMenu16', 'customMenu17', 'customMenu18', 'customMenu19', 'customMenu20']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedMenus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'RiceCookerMenu', 'type': 'string', 'enum': ['stickyPlainRice', 'wellCookedPlainRice', 'frozenPlainRice', 'mixedGrains', 'brownRice100', 'riceWithBeans', 'barleyMixedGrainRice', 'superGrains', 'frozenMixedGrain', 'cauldronRice', 'riceForGimbap', 'plainQuick', 'konjacRice', 'mixedGrainForSalad', 'mixedGrainsQuick', 'nutritiousRiceInHotPot', 'steamedDish', 'nutritiousPorridge', 'scorchedRiceTea', 'bakedEgg', 'sousVide', 'scorchedRice', 'babyFoodStep1', 'babyFoodStep2', 'babyFoodStep3', 'riceWithSeasonedVegetablesInHotPot', 'mixedGrainForSlim', 'mixedGrainForVitality', 'haedeul', 'alchanmi', 'odaemi', 'oatRice', 'chickpeaRice', 'quinoaRice', 'lentilBeanRice', 'steamedSweetPotato', 'galbijjim', 'samgyetang', 'riceWithWebfootOctopusAndSaussureaInHotPot', 'riceWithAbaloneInHotPot', 'riceWithTruffledBulgogiInHotPot', 'riceWithSteakInHotPot', 'riceWithRipeKimchiAndAbaloneInHotPot', 'riceWithBeefAndBeanSproutsInHotPot', 'riceWithAssortedMushrommsInHotPot', 'riceWithBrackenAndSteakInHotPot', 'riceWithBeefAndAssortedMushroomsInHotPot', 'riceWithSpicyWebfootOctopusInHotPot', 'kamutRice', 'mixedGrainForSaladWithLentilBean', 'mixedGrainForSaladWithChickpea(1Cup)', 'mixedGrainForSaladWithQuinoa', 'mixedGrainForSaladWithMillet', 'mixedGrainForSaladWithChickpea(2Cup)', 'mixedGrainForSaladWithBarley', 'mixedGrainForSaladWithBrownRice(1Cup)', 'mixedGrainForSaladWithOatRice', 'mixedGrainForSaladWithBrownRice(2Cup)', 'mixedGrainForSaladWithKamut', 'mixedGrainForSaladWithBrownRice', 'mixedGrainForSaladWithQuinoa(1Cup)', 'mixedGrainForSaladWithChickpea', 'mixedGrainForSaladWithQuinoa(2Cup)', 'mixedGrainForSaladWithAdlay', 'mixedGrainForSaladWithLentilBean(1Cup)', 'plainPorridge', 'mixedGrainForSaladWithLentilBean(2Cup)', 'abalonePorridge', 'pineNutPorridge', 'boiledEgg', 'chicken,SweetPumpkin,Cabbage,StickyRicePorridge', 'chicken,Zucchini,SweetPotato,StickyRicePorridge', 'beef,Apple,BroccoliPorridge', 'chicken,BokChoy,BananaPorridge', 'beef,Zucchini,PearPorridge', 'beef,ShiitakeMushroom,EggPorridge', 'beef,KingTrumpetMushroom,BroccoliPorridge', 'chicken,BeanSprouts,Jujube,StickyRicePorridge', 'cod-Meat,Vitamin,CarrotPorridge', 'chicken,SweetPotato,Beet,BeetPorridge', 'chicken,PineNut,Chestnut,Spinach,SoftBoiledRice', 'beef,Beet,EnokiMushroom,PerillaSeeds,SoftBoiledRice', 'chicken,Cheese,Beet,Eggplant,SoftBoiledRice', 'codFlesh,SweetPumpkin,Mung-BeanSprouts,BlackSesame,SoftBoiledRice', 'beef,Cabbage,WhiteMushroom,Jujube,SoftBoiledRice', 'broccoliPorridge', 'potatoCarrotPorridge', 'yakbab', 'steamedPotato', 'customMenu01', 'customMenu02', 'customMenu03', 'customMenu04', 'customMenu05', 'customMenu06', 'customMenu07', 'customMenu08', 'customMenu09', 'customMenu10', 'customMenu11', 'customMenu12', 'customMenu13', 'customMenu14', 'customMenu15', 'customMenu16', 'customMenu17', 'customMenu18', 'customMenu19', 'customMenu20']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'event': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['cookingComplete', 'keepWarmComplete', 'reheatingComplete', 'autoCleanComplete', 'soakInnerPotComplete', 'steamEmission']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedEvents': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['cookingComplete', 'keepWarmComplete', 'reheatingComplete', 'autoCleanComplete', 'soakInnerPotComplete', 'steamEmission']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'stop': {'name': 'stop', 'arguments': []}, 'startCooking': {'name': 'startCooking', 'arguments': [{'name': 'menu', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}, 'setMode': {'name': 'setMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'cookerMode', 'type': 'string', 'enum': ['keepWarm', 'reheating', 'autoClean', 'soakInnerPot']}}]}, 'scheduleCooking': {'name': 'scheduleCooking', 'arguments': [{'name': 'time', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, {'name': 'menu', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/robotCleanerState/1
	 id ( <class 'str'> ) : 
		 robotCleanerState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Robot Cleaner State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'robotCleanerTurboState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['turboOff', 'turboOn', 'turboSilence']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setRobotCleanerTurboState', 'enumCommands': []}, 'robotCleanerCleaningState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['cleaningAuto', 'cleaningManual', 'cleaningPart', 'cleaningRepeat', 'cleaningStop']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setRobotCleanerCleaningState', 'enumCommands': []}, 'supportedRobotCleanerStates': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['cleaningAuto', 'cleaningManual', 'cleaningPart', 'cleaningRepeat', 'cleaningStop']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'robotCleanerControlState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['controlAfter', 'controlAlarm', 'controlCharging', 'controlCleaning', 'controlHoming', 'controlIdle', 'controlPause', 'controlPoint', 'controlPowerOff', 'controlReserve']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setRobotCleanerControlState', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setRobotCleanerCleaningState': {'name': 'setRobotCleanerCleaningState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'type': 'string', 'enum': ['cleaningAuto', 'cleaningStop']}}]}, 'stop': {'name': 'stop', 'arguments': []}, 'setRobotCleanerControlState': {'name': 'setRobotCleanerControlState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'type': 'string', 'enum': ['controlHoming']}}]}, 'setRobotCleanerTurboState': {'name': 'setRobotCleanerTurboState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'type': 'string', 'enum': ['turboOff', 'turboOn', 'turboSilence']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/powerConsumptionReport/1
	 id ( <class 'str'> ) : 
		 powerConsumptionReport
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Power Consumption Report
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'powerConsumption': {'schema': {'type': 'object', 'properties': {'value': {'properties': {'deltaEnergy': {'type': 'number'}, 'end': {'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$', 'title': 'Iso8601Date', 'type': 'string'}, 'start': {'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$', 'title': 'Iso8601Date', 'type': 'string'}, 'energySaved': {'type': 'number'}, 'persistedSavedEnergy': {'type': 'number'}, 'energy': {'type': 'number'}, 'power': {'type': 'number'}, 'powerEnergy': {'type': 'number'}, 'persistedEnergy': {'type': 'number'}}, 'additionalProperties': False, 'title': 'PowerConsumption', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/networkMeter/1
	 id ( <class 'str'> ) : 
		 networkMeter
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Network Meter
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'uplinkSpeed': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'downlinkSpeed': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/statelessAirCleanerModeButton/1
	 id ( <class 'str'> ) : 
		 statelessAirCleanerModeButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Air Cleaner Mode Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableAirCleanerModeButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['changeMode']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['changeMode']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/sleepSensor/1
	 id ( <class 'str'> ) : 
		 sleepSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Sleep Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'sleeping': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['not sleeping', 'sleeping']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/statelessHumidifierModeButton/1
	 id ( <class 'str'> ) : 
		 statelessHumidifierModeButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Humidifier Mode Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableHumidifierModeButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['changeMode']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['changeMode']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/switchLevel/1
	 id ( <class 'str'> ) : 
		 switchLevel
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Switch Level
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'levelRange': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': False, 'properties': {'minimum': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'maximum': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'step': {'type': 'integer', 'minimum': 1, 'maximum': 100}}, 'required': ['minimum', 'maximum']}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'level': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setLevel', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setLevel': {'name': 'setLevel', 'arguments': [{'name': 'level', 'optional': False, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 100}}, {'name': 'rate', 'optional': True, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}}


Response from  https://api.smartthings.com/v1/capabilities/samsungTv/1
	 id ( <class 'str'> ) : 
		 samsungTv
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Samsung TV
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'volume': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'setter': 'setVolume', 'enumCommands': []}, 'pictureMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['dynamic', 'movie', 'standard', 'unknown']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setPictureMode', 'enumCommands': []}, 'messageButton': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'soundMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['clear voice', 'movie', 'music', 'standard', 'unknown']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setSoundMode', 'enumCommands': []}, 'mute': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['muted', 'unknown', 'unmuted']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': [{'command': 'mute', 'value': 'muted'}, {'command': 'unmute', 'value': 'unmuted'}]}, 'switch': {'schema': {'type': 'object', 'properties': {'value': {'title': 'SwitchState', 'type': 'string', 'enum': ['on', 'off']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': [{'command': 'on', 'value': 'on'}, {'command': 'off', 'value': 'off'}]}}
	 commands ( <class 'dict'> ) : 
		 {'setPictureMode': {'name': 'setPictureMode', 'arguments': [{'name': 'pictureMode', 'optional': False, 'schema': {'type': 'string', 'enum': ['dynamic', 'movie', 'standard']}}]}, 'volumeDown': {'name': 'volumeDown', 'arguments': []}, 'setSoundMode': {'name': 'setSoundMode', 'arguments': [{'name': 'soundMode', 'optional': False, 'schema': {'type': 'string', 'enum': ['clear voice', 'movie', 'music', 'standard']}}]}, 'showMessage': {'name': 'showMessage', 'arguments': [{'name': '1', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': '2', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': '3', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': '4', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}, 'volumeUp': {'name': 'volumeUp', 'arguments': []}, 'mute': {'name': 'mute', 'arguments': []}, 'unmute': {'name': 'unmute', 'arguments': []}, 'setVolume': {'name': 'setVolume', 'arguments': [{'name': 'volume', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}, 'off': {'name': 'off', 'arguments': []}, 'on': {'name': 'on', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/presenceSensor/1
	 id ( <class 'str'> ) : 
		 presenceSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Presence Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'presence': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PresenceState', 'type': 'string', 'enum': ['present', 'not present']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/mediaPresets/1
	 id ( <class 'str'> ) : 
		 mediaPresets
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Media Presets
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'presets': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'MediaPreset', 'type': 'object', 'additionalProperties': False, 'properties': {'id': {'type': 'string'}, 'name': {'type': 'string'}, 'mediaSource': {'type': 'string'}, 'imageUrl': {'type': 'string'}}, 'required': ['id', 'name']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'playPreset': {'name': 'playPreset', 'arguments': [{'name': 'presetId', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/outlet/1
	 id ( <class 'str'> ) : 
		 outlet
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Outlet
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'switch': {'schema': {'type': 'object', 'properties': {'value': {'title': 'SwitchState', 'type': 'string', 'enum': ['on', 'off']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'on', 'value': 'on'}, {'command': 'off', 'value': 'off'}]}}
	 commands ( <class 'dict'> ) : 
		 {'off': {'name': 'off', 'arguments': []}, 'on': {'name': 'on', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/occupancySensor/1
	 id ( <class 'str'> ) : 
		 occupancySensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Occupancy Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'occupancy': {'schema': {'type': 'object', 'properties': {'value': {'title': 'OccupancyState', 'type': 'string', 'enum': ['occupied', 'unoccupied']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/radonHealthConcern/1
	 id ( <class 'str'> ) : 
		 radonHealthConcern
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Radon Health Concern
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'radonHealthConcern': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirQualityHealthConcern', 'type': 'string', 'enum': ['good', 'moderate', 'slightlyUnhealthy', 'unhealthy', 'veryUnhealthy', 'hazardous']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/testCapability/1
	 id ( <class 'str'> ) : 
		 testCapability
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Test Capability
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/precipitationMeasurement/1
	 id ( <class 'str'> ) : 
		 precipitationMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Precipitation Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'precipitationLevel': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveNumber', 'type': 'number', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['mm', 'in']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'resetPrecipitationLevel': {'name': 'resetPrecipitationLevel', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/mediaTrackControl/1
	 id ( <class 'str'> ) : 
		 mediaTrackControl
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Media Track Control
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedTrackControlCommands': {'schema': {'type': 'object', 'properties': {'value': {'items': {'title': 'MediaTrackCommands', 'enum': ['previousTrack', 'nextTrack'], 'type': 'string'}, 'type': 'array'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'previousTrack': {'name': 'previousTrack', 'arguments': []}, 'nextTrack': {'name': 'nextTrack', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/robotCleanerOperatingState/1
	 id ( <class 'str'> ) : 
		 robotCleanerOperatingState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Robot Cleaner Operating State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'operatingState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'RobotCleanerOperatingState', 'type': 'string', 'enum': ['stopped', 'running', 'paused', 'seekingCharger', 'charging', 'docked', 'unableToStartOrResume', 'unableToCompleteOperation', 'commandInvalidInState', 'failedToFindChargingDock', 'stuck', 'dustBinMissing', 'dustBinFull', 'waterTankEmpty', 'waterTankMissing', 'waterTankLidOpen', 'mopCleaningPadMissing']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedOperatingStates': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'RobotCleanerOperatingState', 'type': 'string', 'enum': ['stopped', 'running', 'paused', 'seekingCharger', 'charging', 'docked', 'unableToStartOrResume', 'unableToCompleteOperation', 'commandInvalidInState', 'failedToFindChargingDock', 'stuck', 'dustBinMissing', 'dustBinFull', 'waterTankEmpty', 'waterTankMissing', 'waterTankLidOpen', 'mopCleaningPadMissing']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/robotCleanerCleaningMode/1
	 id ( <class 'str'> ) : 
		 robotCleanerCleaningMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Robot Cleaner Cleaning Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'robotCleanerCleaningMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['auto', 'part', 'repeat', 'manual', 'stop', 'map']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setRobotCleanerCleaningMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setRobotCleanerCleaningMode': {'name': 'setRobotCleanerCleaningMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'type': 'string', 'enum': ['auto', 'part', 'repeat', 'manual', 'stop', 'map']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/soundDetection/1
	 id ( <class 'str'> ) : 
		 soundDetection
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Sound Detection
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'soundDetectionState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'EnableState', 'type': 'string', 'enum': ['enabled', 'disabled']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'enableSoundDetection', 'value': 'enabled'}, {'command': 'disableSoundDetection', 'value': 'disabled'}]}, 'supportedSoundTypes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'DetectedSoundType', 'type': 'string', 'enum': ['noSound', 'babyCrying', 'glassBreaking', 'fireAlarm', 'dogBarking', 'catMeowing', 'doorKnocking', 'siren', 'fingerSnapping', 'snoring']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'soundDetected': {'schema': {'type': 'object', 'properties': {'value': {'title': 'DetectedSoundType', 'type': 'string', 'enum': ['noSound', 'babyCrying', 'glassBreaking', 'fireAlarm', 'dogBarking', 'catMeowing', 'doorKnocking', 'siren', 'fingerSnapping', 'snoring']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'disableSoundDetection': {'name': 'disableSoundDetection', 'arguments': []}, 'enableSoundDetection': {'name': 'enableSoundDetection', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/ocf/1
	 id ( <class 'str'> ) : 
		 ocf
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Ocf
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'st': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'mndt': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'mnfv': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'mnhw': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'di': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'mnsl': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'dmv': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'n': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'mnmo': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'vid': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'mnmn': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'mnml': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'mnpv': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'mnos': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'pi': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'icv': {'schema': {'title': 'StringAttribute', 'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'postOcfCommand': {'name': 'postOcfCommand', 'arguments': [{'name': 'href', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': 'value', 'optional': False, 'schema': {'title': 'JsonObject', 'type': 'object'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/statelessAudioVolumeButton/1
	 id ( <class 'str'> ) : 
		 statelessAudioVolumeButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Stateless Audio Volume Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableAudioVolumeButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['volumeUp', 'volumeDown']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['volumeUp', 'volumeDown']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/thermostatCoolingSetpoint/1
	 id ( <class 'str'> ) : 
		 thermostatCoolingSetpoint
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Thermostat Cooling Setpoint
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'coolingSetpointRange': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': False, 'properties': {'minimum': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'maximum': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'step': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}}, 'required': ['minimum', 'maximum']}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}, 'coolingSetpoint': {'schema': {'title': 'Temperature', 'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'setter': 'setCoolingSetpoint', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setCoolingSetpoint': {'name': 'setCoolingSetpoint', 'arguments': [{'name': 'setpoint', 'optional': False, 'schema': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}}]}}


Response from  https://api.smartthings.com/v1/capabilities/powerMeter/1
	 id ( <class 'str'> ) : 
		 powerMeter
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Power Meter
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'power': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}, 'unit': {'type': 'string', 'enum': ['W'], 'default': 'W'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/rapidCooling/1
	 id ( <class 'str'> ) : 
		 rapidCooling
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Rapid Cooling
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'rapidCooling': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['off', 'on']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setRapidCooling', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setRapidCooling': {'name': 'setRapidCooling', 'arguments': [{'name': 'rapidCooling', 'optional': False, 'schema': {'type': 'string', 'enum': ['off', 'on']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/ovenMode/1
	 id ( <class 'str'> ) : 
		 ovenMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Oven Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedOvenModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'OvenMode', 'type': 'string', 'enum': ['heating', 'grill', 'warming', 'defrosting', 'Conventional', 'Bake', 'BottomHeat', 'ConvectionBake', 'ConvectionRoast', 'Broil', 'ConvectionBroil', 'SteamCook', 'SteamBake', 'SteamRoast', 'SteamBottomHeatplusConvection', 'Microwave', 'MWplusGrill', 'MWplusConvection', 'MWplusHotBlast', 'MWplusHotBlast2', 'SlimMiddle', 'SlimStrong', 'SlowCook', 'Proof', 'Dehydrate', 'Others']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'ovenMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'OvenMode', 'type': 'string', 'enum': ['heating', 'grill', 'warming', 'defrosting', 'Conventional', 'Bake', 'BottomHeat', 'ConvectionBake', 'ConvectionRoast', 'Broil', 'ConvectionBroil', 'SteamCook', 'SteamBake', 'SteamRoast', 'SteamBottomHeatplusConvection', 'Microwave', 'MWplusGrill', 'MWplusConvection', 'MWplusHotBlast', 'MWplusHotBlast2', 'SlimMiddle', 'SlimStrong', 'SlowCook', 'Proof', 'Dehydrate', 'Others']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setOvenMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setOvenMode': {'name': 'setOvenMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'OvenMode', 'type': 'string', 'enum': ['heating', 'grill', 'warming', 'defrosting', 'Conventional', 'Bake', 'BottomHeat', 'ConvectionBake', 'ConvectionRoast', 'Broil', 'ConvectionBroil', 'SteamCook', 'SteamBake', 'SteamRoast', 'SteamBottomHeatplusConvection', 'Microwave', 'MWplusGrill', 'MWplusConvection', 'MWplusHotBlast', 'MWplusHotBlast2', 'SlimMiddle', 'SlimStrong', 'SlowCook', 'Proof', 'Dehydrate', 'Others']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/mediaPlayback/1
	 id ( <class 'str'> ) : 
		 mediaPlayback
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Media Playback
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedPlaybackCommands': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'MediaPlaybackCommands', 'type': 'string', 'enum': ['pause', 'play', 'stop', 'fastForward', 'rewind']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'playbackStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['paused', 'playing', 'stopped', 'fast forwarding', 'rewinding', 'buffering']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setPlaybackStatus', 'enumCommands': [{'command': 'play', 'value': 'playing'}, {'command': 'pause', 'value': 'paused'}, {'command': 'stop', 'value': 'stopped'}, {'command': 'fastForward', 'value': 'fast forwarding'}, {'command': 'rewind', 'value': 'rewinding'}]}}
	 commands ( <class 'dict'> ) : 
		 {'play': {'name': 'play', 'arguments': []}, 'stop': {'name': 'stop', 'arguments': []}, 'rewind': {'name': 'rewind', 'arguments': []}, 'fastForward': {'name': 'fastForward', 'arguments': []}, 'setPlaybackStatus': {'name': 'setPlaybackStatus', 'arguments': [{'name': 'status', 'optional': False, 'schema': {'type': 'string', 'enum': ['paused', 'playing', 'stopped', 'fast forwarding', 'rewinding']}}]}, 'pause': {'name': 'pause', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/ovenOperationalState/1
	 id ( <class 'str'> ) : 
		 ovenOperationalState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Oven Operational State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'completionTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'machineState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['ready', 'running', 'paused']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setMachineState', 'enumCommands': []}, 'progress': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedMachineStates': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['ready', 'running', 'paused']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'ovenJobState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['cleaning', 'cooking', 'cooling', 'draining', 'preheat', 'ready', 'rinsing', 'finished', 'scheduledStart', 'warming', 'defrosting', 'sensing', 'searing', 'fastPreheat', 'scheduledEnd', 'stoneHeating', 'timeHoldPreheat']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'operationTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'stop': {'name': 'stop', 'arguments': []}, 'setMachineState': {'name': 'setMachineState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'type': 'string', 'enum': ['stop']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/temperatureLevel/1
	 id ( <class 'str'> ) : 
		 temperatureLevel
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Temperature Level
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'temperatureLevel': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setTemperatureLevel', 'enumCommands': []}, 'supportedTemperatureLevels': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string'}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setTemperatureLevel': {'name': 'setTemperatureLevel', 'arguments': [{'name': 'temperatureLevel', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/motionSensor/1
	 id ( <class 'str'> ) : 
		 motionSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Motion Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'motion': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ActivityState', 'type': 'string', 'enum': ['active', 'inactive']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/speechSynthesis/1
	 id ( <class 'str'> ) : 
		 speechSynthesis
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Speech Synthesis
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'speak': {'name': 'speak', 'arguments': [{'name': 'phrase', 'optional': False, 'schema': {'type': 'string', 'maxLength': 1000}}]}}


Response from  https://api.smartthings.com/v1/capabilities/panicAlarm/1
	 id ( <class 'str'> ) : 
		 panicAlarm
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Panic Alarm
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'panicAlarm': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['panic', 'clear']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/statelessScenes/1
	 id ( <class 'str'> ) : 
		 statelessScenes
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Scenes
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedScenes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string'}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setScene': {'name': 'setScene', 'arguments': [{'name': 'scene', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/relativeBrightness/1
	 id ( <class 'str'> ) : 
		 relativeBrightness
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Relative Brightness
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'brightnessIntensity': {'schema': {'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 7}, 'unit': {'type': 'string', 'enum': ['level']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/samsungTV/1
	 id ( <class 'str'> ) : 
		 samsungTV
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Samsung TV
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'volume': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'setter': 'setVolume', 'enumCommands': []}, 'pictureMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['dynamic', 'movie', 'standard', 'unknown']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setPictureMode', 'enumCommands': []}, 'messageButton': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'soundMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['clear voice', 'movie', 'music', 'standard', 'unknown']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setSoundMode', 'enumCommands': []}, 'mute': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['muted', 'unknown', 'unmuted']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': [{'command': 'mute', 'value': 'muted'}, {'command': 'unmute', 'value': 'unmuted'}]}, 'switch': {'schema': {'type': 'object', 'properties': {'value': {'title': 'SwitchState', 'type': 'string', 'enum': ['on', 'off']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': [{'command': 'on', 'value': 'on'}, {'command': 'off', 'value': 'off'}]}}
	 commands ( <class 'dict'> ) : 
		 {'setPictureMode': {'name': 'setPictureMode', 'arguments': [{'name': 'pictureMode', 'optional': False, 'schema': {'type': 'string', 'enum': ['dynamic', 'movie', 'standard']}}]}, 'volumeDown': {'name': 'volumeDown', 'arguments': []}, 'setSoundMode': {'name': 'setSoundMode', 'arguments': [{'name': 'soundMode', 'optional': False, 'schema': {'type': 'string', 'enum': ['clear voice', 'movie', 'music', 'standard']}}]}, 'showMessage': {'name': 'showMessage', 'arguments': [{'name': '1', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': '2', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': '3', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': '4', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}, 'volumeUp': {'name': 'volumeUp', 'arguments': []}, 'mute': {'name': 'mute', 'arguments': []}, 'unmute': {'name': 'unmute', 'arguments': []}, 'setVolume': {'name': 'setVolume', 'arguments': [{'name': 'volume', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}, 'off': {'name': 'off', 'arguments': []}, 'on': {'name': 'on', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/statelessSetChannelByContentButton/1
	 id ( <class 'str'> ) : 
		 statelessSetChannelByContentButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Set Channel By Content Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'setChannelByContent': {'name': 'setChannelByContent', 'arguments': [{'name': 'contentName', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/pHMeasurement/1
	 id ( <class 'str'> ) : 
		 pHMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 pH Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'pH': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 14}, 'unit': {'type': 'string', 'enum': ['pH'], 'default': 'pH'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/statelessPowerButton/1
	 id ( <class 'str'> ) : 
		 statelessPowerButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Stateless Power Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availablePowerButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['powerOn', 'powerOff']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['powerOn', 'powerOff']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/sensor/1
	 id ( <class 'str'> ) : 
		 sensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/smokeDetector/1
	 id ( <class 'str'> ) : 
		 smokeDetector
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Smoke Detector
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'smoke': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['clear', 'detected', 'tested']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/scent/1
	 id ( <class 'str'> ) : 
		 scent
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Scent
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'scentName': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'scentIntensity': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setScentIntensity', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setScentIntensity': {'name': 'setScentIntensity', 'arguments': [{'name': 'intensity', 'optional': False, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 100}}]}}


Response from  https://api.smartthings.com/v1/capabilities/precipitationRate/1
	 id ( <class 'str'> ) : 
		 precipitationRate
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Precipitation Rate
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'precipitationRate': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveNumber', 'type': 'number', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['mm/h', 'in/h']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/soundSensor/1
	 id ( <class 'str'> ) : 
		 soundSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Sound Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'sound': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['detected', 'not detected']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/statelessPowerToggleButton/1
	 id ( <class 'str'> ) : 
		 statelessPowerToggleButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Stateless Power Toggle Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availablePowerToggleButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['powerToggle']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['powerToggle']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/refresh/1
	 id ( <class 'str'> ) : 
		 refresh
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Refresh
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'refresh': {'name': 'refresh', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/radonMeasurement/1
	 id ( <class 'str'> ) : 
		 radonMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Radon Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'radonLevel': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}, 'unit': {'type': 'string', 'enum': ['pCi/L'], 'default': 'pCi/L'}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/moldHealthConcern/1
	 id ( <class 'str'> ) : 
		 moldHealthConcern
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Mold Health Concern
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'moldHealthConcern': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirQualityHealthConcern', 'type': 'string', 'enum': ['good', 'moderate', 'slightlyUnhealthy', 'unhealthy', 'veryUnhealthy', 'hazardous']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/mediaInputSource/1
	 id ( <class 'str'> ) : 
		 mediaInputSource
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Media Input Source
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedInputSources': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'MediaSource', 'type': 'string', 'enum': ['AM', 'CD', 'FM', 'HDMI', 'HDMI1', 'HDMI2', 'HDMI3', 'HDMI4', 'HDMI5', 'HDMI6', 'digitalTv', 'USB', 'YouTube', 'aux', 'bluetooth', 'digital', 'melon', 'wifi', 'network', 'optical', 'coaxial', 'analog1', 'analog2', 'analog3', 'phono']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'inputSource': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MediaSource', 'type': 'string', 'enum': ['AM', 'CD', 'FM', 'HDMI', 'HDMI1', 'HDMI2', 'HDMI3', 'HDMI4', 'HDMI5', 'HDMI6', 'digitalTv', 'USB', 'YouTube', 'aux', 'bluetooth', 'digital', 'melon', 'wifi', 'network', 'optical', 'coaxial', 'analog1', 'analog2', 'analog3', 'phono']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setInputSource', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setInputSource': {'name': 'setInputSource', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'MediaSource', 'type': 'string', 'enum': ['AM', 'CD', 'FM', 'HDMI', 'HDMI1', 'HDMI2', 'HDMI3', 'HDMI4', 'HDMI5', 'HDMI6', 'digitalTv', 'USB', 'YouTube', 'aux', 'bluetooth', 'digital', 'melon', 'wifi', 'network', 'optical', 'coaxial', 'analog1', 'analog2', 'analog3', 'phono']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/operatingState/1
	 id ( <class 'str'> ) : 
		 operatingState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Operating State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'machineState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'OperatingState', 'type': 'string', 'enum': ['paused', 'running', 'ready']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setMachineState', 'enumCommands': []}, 'supportedMachineStates': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'OperatingState', 'type': 'string', 'enum': ['paused', 'running', 'ready']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setMachineState': {'name': 'setMachineState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'title': 'OperatingState', 'type': 'string', 'enum': ['paused', 'running', 'ready']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/speechRecognition/1
	 id ( <class 'str'> ) : 
		 speechRecognition
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Speech Recognition
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'phraseSpoken': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'maxLength': 1000}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/tV/1
	 id ( <class 'str'> ) : 
		 tV
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 TV
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'volume': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'movieMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'sound': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'channel': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'power': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'picture': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'volumeDown': {'name': 'volumeDown', 'arguments': []}, 'volumeUp': {'name': 'volumeUp', 'arguments': []}, 'channelDown': {'name': 'channelDown', 'arguments': []}, 'channelUp': {'name': 'channelUp', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/refrigeration/1
	 id ( <class 'str'> ) : 
		 refrigeration
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Refrigeration
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'defrost': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['off', 'on']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setDefrost', 'enumCommands': []}, 'rapidCooling': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['off', 'on']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setRapidCooling', 'enumCommands': []}, 'rapidFreezing': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['off', 'on']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setRapidFreezing', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setDefrost': {'name': 'setDefrost', 'arguments': [{'name': 'rapidCooling', 'optional': False, 'schema': {'type': 'string', 'enum': ['off', 'on']}}]}, 'setRapidFreezing': {'name': 'setRapidFreezing', 'arguments': [{'name': 'rapidCooling', 'optional': False, 'schema': {'type': 'string', 'enum': ['off', 'on']}}]}, 'setRapidCooling': {'name': 'setRapidCooling', 'arguments': [{'name': 'rapidCooling', 'optional': False, 'schema': {'type': 'string', 'enum': ['off', 'on']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/thermostat/1
	 id ( <class 'str'> ) : 
		 thermostat
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Thermostat
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'thermostatSetpointRange': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': [{'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}], 'minItems': 2, 'maxItems': 2}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'heatingSetpointRange': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': [{'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}], 'minItems': 2, 'maxItems': 2}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'thermostatSetpoint': {'schema': {'title': 'Temperature', 'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}, 'supportedThermostatFanModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'ThermostatFanMode', 'type': 'string', 'enum': ['auto', 'circulate', 'followschedule', 'on']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'schedule': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setSchedule', 'enumCommands': []}, 'coolingSetpointRange': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': [{'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}], 'minItems': 2, 'maxItems': 2}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'heatingSetpoint': {'schema': {'title': 'Temperature', 'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'setter': 'setHeatingSetpoint', 'enumCommands': []}, 'coolingSetpoint': {'schema': {'title': 'Temperature', 'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'setter': 'setCoolingSetpoint', 'enumCommands': []}, 'thermostatOperatingState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ThermostatOperatingState', 'type': 'string', 'enum': ['cooling', 'fan only', 'heating', 'idle', 'pending cool', 'pending heat', 'vent economizer']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'temperature': {'schema': {'title': 'Temperature', 'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}, 'thermostatFanMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ThermostatFanMode', 'type': 'string', 'enum': ['auto', 'circulate', 'followschedule', 'on']}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'supportedThermostatFanModes': {'type': 'array', 'items': {'title': 'ThermostatFanMode', 'type': 'string', 'enum': ['auto', 'circulate', 'followschedule', 'on']}}}}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setThermostatFanMode', 'enumCommands': [{'command': 'fanAuto', 'value': 'auto'}, {'command': 'fanCirculate', 'value': 'circulate'}, {'command': 'fanOn', 'value': 'on'}]}, 'thermostatMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ThermostatMode', 'type': 'string', 'enum': ['asleep', 'auto', 'autowitheco', 'autowithreset', 'autochangeover', 'autochangeoveractive', 'autocool', 'autoheat', 'auxheatonly', 'auxiliaryemergencyheat', 'away', 'cool', 'custom', 'dayoff', 'dryair', 'eco', 'emergency heat', 'emergencyheat', 'emergencyheatactive', 'energysavecool', 'energysaveheat', 'fanonly', 'frostguard', 'furnace', 'heat', 'heatingoff', 'home', 'in', 'manual', 'moistair', 'off', 'out', 'resume', 'rush hour', 'rushhour', 'schedule', 'southernaway']}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'supportedThermostatModes': {'type': 'array', 'items': {'title': 'ThermostatMode', 'type': 'string', 'enum': ['asleep', 'auto', 'autowitheco', 'autowithreset', 'autochangeover', 'autochangeoveractive', 'autocool', 'autoheat', 'auxheatonly', 'auxiliaryemergencyheat', 'away', 'cool', 'custom', 'dayoff', 'dryair', 'eco', 'emergency heat', 'emergencyheat', 'emergencyheatactive', 'energysavecool', 'energysaveheat', 'fanonly', 'frostguard', 'furnace', 'heat', 'heatingoff', 'home', 'in', 'manual', 'moistair', 'off', 'out', 'resume', 'rush hour', 'rushhour', 'schedule', 'southernaway']}}}}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setThermostatMode', 'enumCommands': [{'command': 'auto', 'value': 'auto'}, {'command': 'cool', 'value': 'cool'}, {'command': 'emergencyHeat', 'value': 'emergency heat'}, {'command': 'heat', 'value': 'heat'}, {'command': 'off', 'value': 'off'}]}, 'supportedThermostatModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'ThermostatMode', 'type': 'string', 'enum': ['asleep', 'auto', 'autowitheco', 'autowithreset', 'autochangeover', 'autochangeoveractive', 'autocool', 'autoheat', 'auxheatonly', 'auxiliaryemergencyheat', 'away', 'cool', 'custom', 'dayoff', 'dryair', 'eco', 'emergency heat', 'emergencyheat', 'emergencyheatactive', 'energysavecool', 'energysaveheat', 'fanonly', 'frostguard', 'furnace', 'heat', 'heatingoff', 'home', 'in', 'manual', 'moistair', 'off', 'out', 'resume', 'rush hour', 'rushhour', 'schedule', 'southernaway']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'heat': {'name': 'heat', 'arguments': []}, 'setSchedule': {'name': 'setSchedule', 'arguments': [{'name': 'schedule', 'optional': False, 'schema': {'title': 'JsonObject', 'type': 'object'}}]}, 'auto': {'name': 'auto', 'arguments': []}, 'cool': {'name': 'cool', 'arguments': []}, 'emergencyHeat': {'name': 'emergencyHeat', 'arguments': []}, 'setThermostatFanMode': {'name': 'setThermostatFanMode', 'arguments': [{'name': 'fanmode', 'optional': False, 'schema': {'title': 'ThermostatFanMode', 'type': 'string', 'enum': ['auto', 'circulate', 'followschedule', 'on']}}]}, 'fanAuto': {'name': 'fanAuto', 'arguments': []}, 'fanCirculate': {'name': 'fanCirculate', 'arguments': []}, 'off': {'name': 'off', 'arguments': []}, 'setCoolingSetpoint': {'name': 'setCoolingSetpoint', 'arguments': [{'name': 'setpoint', 'optional': False, 'schema': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}}]}, 'setHeatingSetpoint': {'name': 'setHeatingSetpoint', 'arguments': [{'name': 'setpoint', 'optional': False, 'schema': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}}]}, 'setThermostatMode': {'name': 'setThermostatMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'ThermostatMode', 'type': 'string', 'enum': ['asleep', 'auto', 'autowitheco', 'autowithreset', 'autochangeover', 'autochangeoveractive', 'autocool', 'autoheat', 'auxheatonly', 'auxiliaryemergencyheat', 'away', 'cool', 'custom', 'dayoff', 'dryair', 'eco', 'emergency heat', 'emergencyheat', 'emergencyheatactive', 'energysavecool', 'energysaveheat', 'fanonly', 'frostguard', 'furnace', 'heat', 'heatingoff', 'home', 'in', 'manual', 'moistair', 'off', 'out', 'resume', 'rush hour', 'rushhour', 'schedule', 'southernaway']}}]}, 'fanOn': {'name': 'fanOn', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/statelessCustomButton/1
	 id ( <class 'str'> ) : 
		 statelessCustomButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Stateless Custom Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableCustomButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string'}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/odorSensor/1
	 id ( <class 'str'> ) : 
		 odorSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Odor Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'odorLevel': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/statelessChannelButton/1
	 id ( <class 'str'> ) : 
		 statelessChannelButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Stateless Channel Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableChannelButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['channelUp', 'channelDown']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['channelUp', 'channelDown']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/statelessAudioMuteButton/1
	 id ( <class 'str'> ) : 
		 statelessAudioMuteButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Stateless Audio Mute Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableAudioMuteButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['muteToggle']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['muteToggle']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/notification/1
	 id ( <class 'str'> ) : 
		 notification
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Notification
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'deviceNotification': {'name': 'deviceNotification', 'arguments': [{'name': 'notification', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/tamperAlert/1
	 id ( <class 'str'> ) : 
		 tamperAlert
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Tamper Alert
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'tamper': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['clear', 'detected']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/precipitationSensor/1
	 id ( <class 'str'> ) : 
		 precipitationSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Precipitation Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'precipitationIntensity': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['none', 'possiblePrecipitation', 'light', 'moderate', 'heavy', 'violent']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/ovenOperatingState/1
	 id ( <class 'str'> ) : 
		 ovenOperatingState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Oven Operating State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'completionTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'machineState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['ready', 'running', 'paused']}}, 'additionalProperties': False, 'required': []}, 'setter': 'setMachineState', 'enumCommands': []}, 'progress': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedMachineStates': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['ready', 'running', 'paused']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'ovenJobState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['cleaning', 'cooking', 'cooling', 'draining', 'preheat', 'ready', 'rinsing', 'finished', 'scheduledStart', 'warming', 'defrosting', 'sensing', 'searing', 'fastPreheat', 'scheduledEnd', 'stoneHeating', 'timeHoldPreheat']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'operationTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'stop': {'name': 'stop', 'arguments': []}, 'setMachineState': {'name': 'setMachineState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'type': 'string', 'enum': ['stop']}}]}, 'start': {'name': 'start', 'arguments': [{'name': 'mode', 'optional': True, 'schema': {'title': 'OvenMode', 'type': 'string', 'enum': ['heating', 'grill', 'warming', 'defrosting', 'Conventional', 'Bake', 'BottomHeat', 'ConvectionBake', 'ConvectionRoast', 'Broil', 'ConvectionBroil', 'SteamCook', 'SteamBake', 'SteamRoast', 'SteamBottomHeatplusConvection', 'Microwave', 'MWplusGrill', 'MWplusConvection', 'MWplusHotBlast', 'MWplusHotBlast2', 'SlimMiddle', 'SlimStrong', 'SlowCook', 'Proof', 'Dehydrate', 'Others']}}, {'name': 'time', 'optional': True, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, {'name': 'setpoint', 'optional': True, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}}


Response from  https://api.smartthings.com/v1/capabilities/objectDetection/1
	 id ( <class 'str'> ) : 
		 objectDetection
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Object Detection
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'detected': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ObjectDetectionValue', 'type': 'object', 'additionalProperties': False, 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}, 'qty': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}, 'data': {'title': 'JsonObject', 'type': 'object'}}, 'required': ['value']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedValues': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'String', 'type': 'string', 'maxLength': 255}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/temperatureAlarm/1
	 id ( <class 'str'> ) : 
		 temperatureAlarm
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Temperature Alarm
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'temperatureAlarm': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['cleared', 'freeze', 'heat', 'rateOfRise']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/temperatureSetpoint/1
	 id ( <class 'str'> ) : 
		 temperatureSetpoint
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Temperature Setpoint
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'temperatureSetpoint': {'schema': {'title': 'Temperature', 'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'setter': 'setTemperatureSetpoint', 'enumCommands': []}, 'temperatureSetpointRange': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': False, 'properties': {'minimum': {'title': 'Temperature', 'type': 'object', 'additionalProperties': False, 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'title': 'TemperatureUnit', 'type': 'string', 'enum': ['F', 'C']}}, 'required': ['value', 'unit']}, 'maximum': {'title': 'Temperature', 'type': 'object', 'additionalProperties': False, 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'title': 'TemperatureUnit', 'type': 'string', 'enum': ['F', 'C']}}, 'required': ['value', 'unit']}, 'step': {'title': 'Temperature', 'type': 'object', 'additionalProperties': False, 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'title': 'TemperatureUnit', 'type': 'string', 'enum': ['F', 'C']}}, 'required': ['value', 'unit']}}, 'required': ['minimum', 'maximum']}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setTemperatureSetpoint': {'name': 'setTemperatureSetpoint', 'arguments': [{'name': 'setpoint', 'optional': False, 'schema': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}}]}}


Response from  https://api.smartthings.com/v1/capabilities/statelessRobotCleanerToggleButton/1
	 id ( <class 'str'> ) : 
		 statelessRobotCleanerToggleButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Robot Cleaner Toggle Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableRobotCleanerToggleButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['actionToggle']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['actionToggle']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/mediaPlaybackShuffle/1
	 id ( <class 'str'> ) : 
		 mediaPlaybackShuffle
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Media Playback Shuffle
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'playbackShuffle': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['disabled', 'enabled']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setPlaybackShuffle', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setPlaybackShuffle': {'name': 'setPlaybackShuffle', 'arguments': [{'name': 'shuffle', 'optional': False, 'schema': {'type': 'string', 'enum': ['disabled', 'enabled']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/scenes/1
	 id ( <class 'str'> ) : 
		 scenes
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Scenes
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedScenes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string'}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'scene': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setScene', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setScene': {'name': 'setScene', 'arguments': [{'name': 'scene', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/statelessRobotCleanerActionButton/1
	 id ( <class 'str'> ) : 
		 statelessRobotCleanerActionButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Robot Cleaner Action Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableRobotCleanerActionButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['start', 'stop', 'quit']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['start', 'stop', 'quit']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/pestControl/1
	 id ( <class 'str'> ) : 
		 pestControl
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Pest Control
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'pestControl': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['idle', 'trapArmed', 'trapRearmRequired', 'pestDetected', 'pestExterminated']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/statelessFanspeedModeButton/1
	 id ( <class 'str'> ) : 
		 statelessFanspeedModeButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Fanspeed Mode Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableFanspeedModeButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['changeMode']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['changeMode']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/ovenSetpoint/1
	 id ( <class 'str'> ) : 
		 ovenSetpoint
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Oven Setpoint
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'ovenSetpoint': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setOvenSetpoint', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setOvenSetpoint': {'name': 'setOvenSetpoint', 'arguments': [{'name': 'setpoint', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}}


Response from  https://api.smartthings.com/v1/capabilities/statelessRobotCleanerHomeButton/1
	 id ( <class 'str'> ) : 
		 statelessRobotCleanerHomeButton
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Stateless Robot Cleaner Home Button
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'availableRobotCleanerHomeButtons': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['home']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setButton': {'name': 'setButton', 'arguments': [{'name': 'button', 'optional': False, 'schema': {'type': 'string', 'enum': ['home']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/mediaPlaybackRepeat/1
	 id ( <class 'str'> ) : 
		 mediaPlaybackRepeat
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Media Playback Repeat
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'playbackRepeatMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['all', 'off', 'one']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setPlaybackRepeatMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setPlaybackRepeatMode': {'name': 'setPlaybackRepeatMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'type': 'string', 'enum': ['all', 'off', 'one']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/polling/1
	 id ( <class 'str'> ) : 
		 polling
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Polling
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'poll': {'name': 'poll', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/powerSource/1
	 id ( <class 'str'> ) : 
		 powerSource
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Power Source
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'powerSource': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['battery', 'dc', 'mains', 'unknown']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/robotCleanerMovement/1
	 id ( <class 'str'> ) : 
		 robotCleanerMovement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Robot Cleaner Movement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'robotCleanerMovement': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['homing', 'idle', 'charging', 'alarm', 'powerOff', 'reserve', 'point', 'after', 'cleaning', 'pause']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setRobotCleanerMovement', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setRobotCleanerMovement': {'name': 'setRobotCleanerMovement', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'type': 'string', 'enum': ['homing', 'idle', 'charging', 'alarm', 'powerOff', 'reserve', 'point', 'after', 'cleaning', 'pause']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/movementSensor/1
	 id ( <class 'str'> ) : 
		 movementSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Movement Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'movement': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MovementType', 'type': 'string', 'enum': ['inactive', 'approaching', 'movingAway', 'entering', 'leaving']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/mode/1
	 id ( <class 'str'> ) : 
		 mode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'mode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setMode', 'enumCommands': []}, 'supportedModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string'}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setMode': {'name': 'setMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/refrigerationSetpoint/1
	 id ( <class 'str'> ) : 
		 refrigerationSetpoint
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Refrigeration Setpoint
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'refrigerationSetpoint': {'schema': {'title': 'Temperature', 'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'setter': 'setRefrigerationSetpoint', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setRefrigerationSetpoint': {'name': 'setRefrigerationSetpoint', 'arguments': [{'name': 'setpoint', 'optional': False, 'schema': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}}]}}


Response from  https://api.smartthings.com/v1/capabilities/signalStrength/1
	 id ( <class 'str'> ) : 
		 signalStrength
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Signal Strength
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'rssi': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': -200, 'maximum': 0}, 'unit': {'type': 'string', 'enum': ['dBm'], 'default': 'dBm'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'lqi': {'schema': {'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/stepSensor/1
	 id ( <class 'str'> ) : 
		 stepSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Step Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'goal': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'steps': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/switch/1
	 id ( <class 'str'> ) : 
		 switch
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Switch
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'switch': {'schema': {'type': 'object', 'properties': {'value': {'title': 'SwitchState', 'type': 'string', 'enum': ['on', 'off']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'on', 'value': 'on'}, {'command': 'off', 'value': 'off'}]}}
	 commands ( <class 'dict'> ) : 
		 {'off': {'name': 'off', 'arguments': []}, 'on': {'name': 'on', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/musicPlayer/1
	 id ( <class 'str'> ) : 
		 musicPlayer
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Music Player
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'trackDescription': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'level': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': []}, 'setter': 'setLevel', 'enumCommands': []}, 'mute': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MuteState', 'type': 'string', 'enum': ['muted', 'unmuted']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': [{'command': 'mute', 'value': 'muted'}, {'command': 'unmute', 'value': 'unmuted'}]}, 'trackData': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'status': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'play': {'name': 'play', 'arguments': []}, 'restoreTrack': {'name': 'restoreTrack', 'arguments': [{'name': 'trackToRestore', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}, 'resumeTrack': {'name': 'resumeTrack', 'arguments': [{'name': 'trackToResume', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}, 'stop': {'name': 'stop', 'arguments': []}, 'previousTrack': {'name': 'previousTrack', 'arguments': []}, 'nextTrack': {'name': 'nextTrack', 'arguments': []}, 'mute': {'name': 'mute', 'arguments': []}, 'setTrack': {'name': 'setTrack', 'arguments': [{'name': 'trackToSet', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}, 'unmute': {'name': 'unmute', 'arguments': []}, 'playTrack': {'name': 'playTrack', 'arguments': [{'name': 'trackToPlay', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}, 'pause': {'name': 'pause', 'arguments': []}, 'setLevel': {'name': 'setLevel', 'arguments': [{'name': 'level', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}}


Response from  https://api.smartthings.com/v1/capabilities/windSpeed/1
	 id ( <class 'str'> ) : 
		 windSpeed
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Wind Speed
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'windspeed': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveNumber', 'type': 'number', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['m/s'], 'default': 'm/s'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/wirelessOperatingMode/1
	 id ( <class 'str'> ) : 
		 wirelessOperatingMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Wireless Operating Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'wirelessOperatingMode': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['whenNeeded', 'alwaysOn']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setWirelessOperatingMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setWirelessOperatingMode': {'name': 'setWirelessOperatingMode', 'arguments': [{'name': 'wirelessOperatingMode', 'optional': False, 'schema': {'type': 'string', 'enum': ['whenNeeded', 'alwaysOn']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/windowShadeLevel/1
	 id ( <class 'str'> ) : 
		 windowShadeLevel
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Window Shade Level
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'shadeLevel': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setShadeLevel', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setShadeLevel': {'name': 'setShadeLevel', 'arguments': [{'name': 'shadeLevel', 'optional': False, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 100}}]}}


Response from  https://api.smartthings.com/v1/capabilities/washerMode/1
	 id ( <class 'str'> ) : 
		 washerMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Washer Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'washerMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'WasherMode', 'type': 'string', 'enum': ['regular', 'heavy', 'rinse', 'spinDry']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setWasherMode', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setWasherMode': {'name': 'setWasherMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'WasherMode', 'type': 'string', 'enum': ['regular', 'heavy', 'rinse', 'spinDry']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/waterSensor/1
	 id ( <class 'str'> ) : 
		 waterSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Water Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'water': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MoistureState', 'type': 'string', 'enum': ['dry', 'wet']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/videoCamera/1
	 id ( <class 'str'> ) : 
		 videoCamera
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Video Camera
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'settings': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'mute': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MuteState', 'type': 'string', 'enum': ['muted', 'unmuted']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': [{'command': 'mute', 'value': 'muted'}, {'command': 'unmute', 'value': 'unmuted'}]}, 'camera': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['off', 'on', 'restarting', 'unavailable']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': [{'command': 'on', 'value': 'on'}, {'command': 'off', 'value': 'off'}]}, 'statusMessage': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'mute': {'name': 'mute', 'arguments': []}, 'unmute': {'name': 'unmute', 'arguments': []}, 'flip': {'name': 'flip', 'arguments': []}, 'off': {'name': 'off', 'arguments': []}, 'on': {'name': 'on', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/tvocMeasurement/1
	 id ( <class 'str'> ) : 
		 tvocMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Tvoc Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'tvocLevel': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 1000000}, 'unit': {'type': 'string', 'enum': ['ppm', 'ppb', 'ug/m3'], 'default': 'ppm'}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/washerOperationalState/1
	 id ( <class 'str'> ) : 
		 washerOperationalState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Washer Operational State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'completionTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'machineState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setMachineState', 'enumCommands': []}, 'washerJobState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['airWash', 'cooling', 'delayWash', 'drying', 'finish', 'none', 'preWash', 'rinse', 'spin', 'wash', 'weightSensing', 'wrinklePrevent']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedMachineStates': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setMachineState': {'name': 'setMachineState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/waterMeter/1
	 id ( <class 'str'> ) : 
		 waterMeter
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Water Meter
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'lastHour': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['gal', 'L'], 'default': 'gal'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'lastTwentyFourHours': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['gal', 'L'], 'default': 'gal'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'lastSevenDays': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['gal', 'L'], 'default': 'gal'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/wifiMeshRouter/1
	 id ( <class 'str'> ) : 
		 wifiMeshRouter
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Wifi Mesh Router
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'disconnectedRouterCount': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'wifiGuestNetworkStatus': {'schema': {'type': 'object', 'properties': {'value': {'title': 'WifiState', 'type': 'string', 'enum': ['enabled', 'disabled', 'not configured']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'enableWifiGuestNetwork', 'value': 'enabled'}, {'command': 'disableWifiGuestNetwork', 'value': 'disabled'}]}, 'connectedRouterCount': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'connectedDeviceCount': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'wifiNetworkName': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'wifiGuestNetworkName': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'wifiNetworkStatus': {'schema': {'type': 'object', 'properties': {'value': {'title': 'WifiState', 'type': 'string', 'enum': ['enabled', 'disabled', 'not configured']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'enableWifiNetwork', 'value': 'enabled'}, {'command': 'disableWifiNetwork', 'value': 'disabled'}]}}
	 commands ( <class 'dict'> ) : 
		 {'enableWifiGuestNetwork': {'name': 'enableWifiGuestNetwork', 'arguments': []}, 'disableWifiNetwork': {'name': 'disableWifiNetwork', 'arguments': []}, 'enableWifiNetwork': {'name': 'enableWifiNetwork', 'arguments': []}, 'disableWifiGuestNetwork': {'name': 'disableWifiGuestNetwork', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/waterFlowAlarm/1
	 id ( <class 'str'> ) : 
		 waterFlowAlarm
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Water Flow Alarm
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'volumeAlarm': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['normal', 'warning', 'alarm']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'durationAlarm': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['normal', 'warning', 'alarm']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedAlarmStatuses': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['normal', 'warning', 'alarm']}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'rateAlarm': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['normal', 'warning', 'alarm']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/tvocHealthConcern/1
	 id ( <class 'str'> ) : 
		 tvocHealthConcern
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Tvoc Health Concern
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'tvocHealthConcern': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirQualityHealthConcern', 'type': 'string', 'enum': ['good', 'moderate', 'slightlyUnhealthy', 'unhealthy', 'veryUnhealthy', 'hazardous']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/webrtc/1
	 id ( <class 'str'> ) : 
		 webrtc
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 webrtc
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'sdpAnswer': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': False, 'properties': {'id': {'type': 'string'}, 'sdp': {'type': 'string'}, 'turn_url': {'type': 'string'}, 'turn_user': {'type': 'string'}, 'turn_pwd': {'type': 'string'}}, 'required': ['id', 'sdp']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'talkback': {'schema': {'type': 'object', 'properties': {'value': {'type': 'boolean'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'turnInfo': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': False, 'properties': {'id': {'type': 'string'}, 'turnUrl': {'type': 'string'}, 'userName': {'type': 'string'}, 'passWord': {'type': 'string'}}, 'required': ['id', 'turnUrl']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedFeatures': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': True, 'properties': {'bundle': {'type': 'boolean'}, 'order': {'type': 'string'}, 'audio': {'type': 'string'}, 'video': {'type': 'string'}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'deviceIce': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': False, 'properties': {'id': {'type': 'string'}, 'ice': {'type': 'object', 'additionalProperties': False, 'properties': {'candidate': {'type': 'string'}, 'sdpMid': {'type': 'string'}, 'sdpMLineIndex': {'type': 'integer'}}, 'required': ['candidate', 'sdpMid', 'sdpMLineIndex']}}, 'required': ['id', 'ice']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'audioOnly': {'schema': {'type': 'object', 'properties': {'value': {'type': 'boolean'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'stunUrl': {'schema': {'type': 'object', 'properties': {'value': {'title': 'URL', 'type': 'string', 'pattern': "^(stun?):((?:[a-zA-Z0-9.-]|%[0-9A-F]{2}){3,})(?::(\\d+))?((?:\\/(?:[a-zA-Z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*)*)(?:\\?((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?$"}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'startTalkback': {'name': 'startTalkback', 'arguments': [{'name': 'id', 'optional': False, 'schema': {'type': 'string'}}]}, 'clientIce': {'name': 'clientIce', 'arguments': [{'name': 'id', 'optional': False, 'schema': {'type': 'string'}}, {'name': 'ice', 'optional': False, 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {'candidate': {'type': 'string'}, 'sdpMid': {'type': 'string'}, 'sdpMLineIndex': {'type': 'integer'}}, 'required': ['candidate', 'sdpMid', 'sdpMLineIndex']}}]}, 'sdpOffer': {'name': 'sdpOffer', 'arguments': [{'name': 'id', 'optional': False, 'schema': {'type': 'string'}}, {'name': 'sdp', 'optional': False, 'schema': {'type': 'string'}}, {'name': 'iceServers', 'optional': True, 'schema': {'type': 'object', 'additionalProperties': False, 'properties': {'urls': {'type': 'array', 'items': {'type': 'string'}}, 'username': {'type': 'string'}, 'password': {'type': 'string'}}, 'required': ['urls']}}]}, 'stopTalkback': {'name': 'stopTalkback', 'arguments': [{'name': 'id', 'optional': False, 'schema': {'type': 'string'}}]}, 'requestTurnInfo': {'name': 'requestTurnInfo', 'arguments': [{'name': 'id', 'optional': False, 'schema': {'type': 'string'}}]}, 'end': {'name': 'end', 'arguments': [{'name': 'id', 'optional': False, 'schema': {'type': 'string'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/windowShade/1
	 id ( <class 'str'> ) : 
		 windowShade
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Window Shade
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedWindowShadeCommands': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['open', 'close', 'pause']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'windowShade': {'schema': {'type': 'object', 'properties': {'value': {'title': 'OpenableState', 'type': 'string', 'enum': ['closed', 'closing', 'open', 'opening', 'partially open', 'unknown']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'close', 'value': 'closed'}, {'command': 'open', 'value': 'open'}]}}
	 commands ( <class 'dict'> ) : 
		 {'close': {'name': 'close', 'arguments': []}, 'open': {'name': 'open', 'arguments': []}, 'pause': {'name': 'pause', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/tvChannel/1
	 id ( <class 'str'> ) : 
		 tvChannel
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Tv Channel
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'tvChannel': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'setter': 'setTvChannel', 'enumCommands': []}, 'tvChannelName': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'setter': 'setTvChannelName', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'channelDown': {'name': 'channelDown', 'arguments': []}, 'setTvChannel': {'name': 'setTvChannel', 'arguments': [{'name': 'tvChannel', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}, 'channelUp': {'name': 'channelUp', 'arguments': []}, 'setTvChannelName': {'name': 'setTvChannelName', 'arguments': [{'name': 'tvChannelName', 'optional': True, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/thermostatFanMode/1
	 id ( <class 'str'> ) : 
		 thermostatFanMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Thermostat Fan Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'thermostatFanMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ThermostatFanMode', 'type': 'string', 'enum': ['auto', 'circulate', 'followschedule', 'on']}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'supportedThermostatFanModes': {'type': 'array', 'items': {'title': 'ThermostatFanMode', 'type': 'string', 'enum': ['auto', 'circulate', 'followschedule', 'on']}}}}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setThermostatFanMode', 'enumCommands': [{'command': 'fanAuto', 'value': 'auto'}, {'command': 'fanCirculate', 'value': 'circulate'}, {'command': 'fanOn', 'value': 'on'}]}, 'supportedThermostatFanModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'ThermostatFanMode', 'type': 'string', 'enum': ['auto', 'circulate', 'followschedule', 'on']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'fanOn': {'name': 'fanOn', 'arguments': []}, 'setThermostatFanMode': {'name': 'setThermostatFanMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'ThermostatFanMode', 'type': 'string', 'enum': ['auto', 'circulate', 'followschedule', 'on']}}]}, 'fanAuto': {'name': 'fanAuto', 'arguments': []}, 'fanCirculate': {'name': 'fanCirculate', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/vehicleOdometer/1
	 id ( <class 'str'> ) : 
		 vehicleOdometer
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Vehicle Odometer
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'odometerReading': {'schema': {'title': 'Distance', 'type': 'object', 'properties': {'value': {'title': 'PositiveNumber', 'type': 'number', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['mi', 'km', 'm']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/windMode/1
	 id ( <class 'str'> ) : 
		 windMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Wind Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'supportedWindModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'string', 'enum': ['noWind', 'sleepWind', 'naturalWind']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'windMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'WindMode', 'type': 'string', 'enum': ['noWind', 'sleepWind', 'naturalWind']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setWindMode': {'name': 'setWindMode', 'arguments': [{'name': 'windMode', 'optional': False, 'schema': {'title': 'WindMode', 'type': 'string', 'enum': ['noWind', 'sleepWind', 'naturalWind']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/thermostatHeatingSetpoint/1
	 id ( <class 'str'> ) : 
		 thermostatHeatingSetpoint
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Thermostat Heating Setpoint
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'heatingSetpoint': {'schema': {'title': 'Temperature', 'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'setter': 'setHeatingSetpoint', 'enumCommands': []}, 'heatingSetpointRange': {'schema': {'type': 'object', 'properties': {'value': {'type': 'object', 'additionalProperties': False, 'properties': {'minimum': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'maximum': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'step': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}}, 'required': ['minimum', 'maximum']}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setHeatingSetpoint': {'name': 'setHeatingSetpoint', 'arguments': [{'name': 'setpoint', 'optional': False, 'schema': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}}]}}


Response from  https://api.smartthings.com/v1/capabilities/vehicleRange/1
	 id ( <class 'str'> ) : 
		 vehicleRange
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Vehicle Range
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'estimatedRemainingRange': {'schema': {'title': 'Distance', 'type': 'object', 'properties': {'value': {'title': 'PositiveNumber', 'type': 'number', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['mi', 'km', 'm']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/veryFineDustHealthConcern/1
	 id ( <class 'str'> ) : 
		 veryFineDustHealthConcern
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Very Fine Dust Health Concern
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'veryFineDustHealthConcern': {'schema': {'type': 'object', 'properties': {'value': {'title': 'AirQualityHealthConcern', 'type': 'string', 'enum': ['good', 'moderate', 'slightlyUnhealthy', 'unhealthy', 'veryUnhealthy', 'hazardous']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/thermostatOperatingState/1
	 id ( <class 'str'> ) : 
		 thermostatOperatingState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Thermostat Operating State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'thermostatOperatingState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ThermostatOperatingState', 'type': 'string', 'enum': ['cooling', 'fan only', 'heating', 'idle', 'pending cool', 'pending heat', 'vent economizer']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/valve/1
	 id ( <class 'str'> ) : 
		 valve
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Valve
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'valve': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['closed', 'open']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'close', 'value': 'closed'}, {'command': 'open', 'value': 'open'}]}}
	 commands ( <class 'dict'> ) : 
		 {'close': {'name': 'close', 'arguments': []}, 'open': {'name': 'open', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/thermostatMode/1
	 id ( <class 'str'> ) : 
		 thermostatMode
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Thermostat Mode
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'thermostatMode': {'schema': {'type': 'object', 'properties': {'value': {'title': 'ThermostatMode', 'type': 'string', 'enum': ['asleep', 'auto', 'autowitheco', 'autowithreset', 'autochangeover', 'autochangeoveractive', 'autocool', 'autoheat', 'auxheatonly', 'auxiliaryemergencyheat', 'away', 'cool', 'comfort', 'custom', 'dayoff', 'dryair', 'eco', 'emergency heat', 'emergencyheat', 'emergencyheatactive', 'energysavecool', 'energysaveheat', 'fanonly', 'frostguard', 'furnace', 'heat', 'heatingoff', 'home', 'hotwateronly', 'in', 'manual', 'moistair', 'off', 'on', 'out', 'resume', 'rush hour', 'rushhour', 'schedule', 'southernaway']}, 'data': {'type': 'object', 'additionalProperties': False, 'required': [], 'properties': {'supportedThermostatModes': {'type': 'array', 'items': {'title': 'ThermostatMode', 'type': 'string', 'enum': ['asleep', 'auto', 'autowitheco', 'autowithreset', 'autochangeover', 'autochangeoveractive', 'autocool', 'autoheat', 'auxheatonly', 'auxiliaryemergencyheat', 'away', 'cool', 'comfort', 'custom', 'dayoff', 'dryair', 'eco', 'emergency heat', 'emergencyheat', 'emergencyheatactive', 'energysavecool', 'energysaveheat', 'fanonly', 'frostguard', 'furnace', 'heat', 'heatingoff', 'home', 'hotwateronly', 'in', 'manual', 'moistair', 'off', 'on', 'out', 'resume', 'rush hour', 'rushhour', 'schedule', 'southernaway']}}}}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setThermostatMode', 'enumCommands': [{'command': 'auto', 'value': 'auto'}, {'command': 'cool', 'value': 'cool'}, {'command': 'emergencyHeat', 'value': 'emergency heat'}, {'command': 'heat', 'value': 'heat'}, {'command': 'off', 'value': 'off'}]}, 'supportedThermostatModes': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'ThermostatMode', 'type': 'string', 'enum': ['asleep', 'auto', 'autowitheco', 'autowithreset', 'autochangeover', 'autochangeoveractive', 'autocool', 'autoheat', 'auxheatonly', 'auxiliaryemergencyheat', 'away', 'cool', 'comfort', 'custom', 'dayoff', 'dryair', 'eco', 'emergency heat', 'emergencyheat', 'emergencyheatactive', 'energysavecool', 'energysaveheat', 'fanonly', 'frostguard', 'furnace', 'heat', 'heatingoff', 'home', 'hotwateronly', 'in', 'manual', 'moistair', 'off', 'on', 'out', 'resume', 'rush hour', 'rushhour', 'schedule', 'southernaway']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'heat': {'name': 'heat', 'arguments': []}, 'auto': {'name': 'auto', 'arguments': []}, 'setThermostatMode': {'name': 'setThermostatMode', 'arguments': [{'name': 'mode', 'optional': False, 'schema': {'title': 'ThermostatMode', 'type': 'string', 'enum': ['asleep', 'auto', 'autowitheco', 'autowithreset', 'autochangeover', 'autochangeoveractive', 'autocool', 'autoheat', 'auxheatonly', 'auxiliaryemergencyheat', 'away', 'cool', 'comfort', 'custom', 'dayoff', 'dryair', 'eco', 'emergency heat', 'emergencyheat', 'emergencyheatactive', 'energysavecool', 'energysaveheat', 'fanonly', 'frostguard', 'furnace', 'heat', 'heatingoff', 'home', 'hotwateronly', 'in', 'manual', 'moistair', 'off', 'on', 'out', 'resume', 'rush hour', 'rushhour', 'schedule', 'southernaway']}}]}, 'cool': {'name': 'cool', 'arguments': []}, 'emergencyHeat': {'name': 'emergencyHeat', 'arguments': []}, 'off': {'name': 'off', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/thermostatSetpoint/1
	 id ( <class 'str'> ) : 
		 thermostatSetpoint
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Thermostat Setpoint
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'thermostatSetpoint': {'schema': {'title': 'Temperature', 'type': 'object', 'properties': {'value': {'title': 'TemperatureValue', 'type': 'number', 'minimum': -460, 'maximum': 10000}, 'unit': {'type': 'string', 'enum': ['F', 'C']}}, 'additionalProperties': False, 'required': ['value', 'unit']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/vehicleTirePressureMonitor/1
	 id ( <class 'str'> ) : 
		 vehicleTirePressureMonitor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Vehicle Tire Pressure Monitor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'tirePressureState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['normal', 'warn']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/waterUsageMeter/1
	 id ( <class 'str'> ) : 
		 waterUsageMeter
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Water Usage Meter
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'waterUsageMonth': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}, 'unit': {'type': 'string', 'enum': ['gal', 'L'], 'default': 'gal'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'waterUsageDay': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number'}, 'unit': {'type': 'string', 'enum': ['gal', 'L'], 'default': 'gal'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/thermostatSchedule/1
	 id ( <class 'str'> ) : 
		 thermostatSchedule
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Thermostat Schedule
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'schedule': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': []}, 'setter': 'setSchedule', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setSchedule': {'name': 'setSchedule', 'arguments': [{'name': 'schedule', 'optional': False, 'schema': {'title': 'JsonObject', 'type': 'object'}}]}}


Response from  https://api.smartthings.com/v1/capabilities/timedSession/1
	 id ( <class 'str'> ) : 
		 timedSession
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Timed Session
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'completionTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setCompletionTime', 'enumCommands': []}, 'sessionStatus': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['canceled', 'paused', 'running', 'stopped']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'cancel', 'value': 'canceled'}, {'command': 'pause', 'value': 'paused'}, {'command': 'start', 'value': 'running'}, {'command': 'stop', 'value': 'stopped'}]}}
	 commands ( <class 'dict'> ) : 
		 {'cancel': {'name': 'cancel', 'arguments': []}, 'stop': {'name': 'stop', 'arguments': []}, 'start': {'name': 'start', 'arguments': []}, 'setCompletionTime': {'name': 'setCompletionTime', 'arguments': [{'name': 'completionTime', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}]}, 'pause': {'name': 'pause', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/windowShadePreset/1
	 id ( <class 'str'> ) : 
		 windowShadePreset
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Window Shade Preset
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'presetPosition': {'name': 'presetPosition', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/touchSensor/1
	 id ( <class 'str'> ) : 
		 touchSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 deprecated
	 name ( <class 'str'> ) : 
		 Touch Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'touch': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['touched']}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/tone/1
	 id ( <class 'str'> ) : 
		 tone
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Tone
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {}
	 commands ( <class 'dict'> ) : 
		 {'beep': {'name': 'beep', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/threeAxis/1
	 id ( <class 'str'> ) : 
		 threeAxis
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Three Axis
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'threeAxis': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'type': 'integer', 'minimum': -10000, 'maximum': 10000}, 'minItems': 3, 'maxItems': 3}, 'unit': {'type': 'string', 'enum': ['mG'], 'default': 'mG'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/vehicleEngine/1
	 id ( <class 'str'> ) : 
		 vehicleEngine
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Vehicle Engine
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'engineState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['starting', 'running', 'unknown', 'off']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': [{'command': 'startEngine', 'value': 'running'}, {'command': 'stopEngine', 'value': 'off'}]}}
	 commands ( <class 'dict'> ) : 
		 {'startEngine': {'name': 'startEngine', 'arguments': []}, 'stopEngine': {'name': 'stopEngine', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/washerOperatingState/1
	 id ( <class 'str'> ) : 
		 washerOperatingState
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Washer Operating State
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'completionTime': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'machineState': {'schema': {'type': 'object', 'properties': {'value': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setMachineState', 'enumCommands': []}, 'washerJobState': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['airWash', 'aIRinse', 'aISpin', 'aIWash', 'cooling', 'delayWash', 'drying', 'finish', 'none', 'preWash', 'rinse', 'spin', 'wash', 'weightSensing', 'wrinklePrevent', 'freezeProtection']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'supportedMachineStates': {'schema': {'type': 'object', 'properties': {'value': {'type': 'array', 'items': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setMachineState': {'name': 'setMachineState', 'arguments': [{'name': 'state', 'optional': False, 'schema': {'title': 'MachineState', 'type': 'string', 'enum': ['pause', 'run', 'stop']}}]}}


Response from  https://api.smartthings.com/v1/capabilities/veryFineDustSensor/1
	 id ( <class 'str'> ) : 
		 veryFineDustSensor
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Very Fine Dust Sensor
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'veryFineDustLevel': {'schema': {'type': 'object', 'properties': {'value': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['μg/m^3'], 'default': 'μg/m^3'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/videoStream/1
	 id ( <class 'str'> ) : 
		 videoStream
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Video Stream
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'stream': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'stopStream': {'name': 'stopStream', 'arguments': []}, 'startStream': {'name': 'startStream', 'arguments': []}}


Response from  https://api.smartthings.com/v1/capabilities/videoCapture/1
	 id ( <class 'str'> ) : 
		 videoCapture
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Video Capture
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'stream': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'clip': {'schema': {'type': 'object', 'properties': {'value': {'title': 'JsonObject', 'type': 'object'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'capture': {'name': 'capture', 'arguments': [{'name': 'startTime', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, {'name': 'captureTime', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, {'name': 'endTime', 'optional': False, 'schema': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}}, {'name': 'correlationId', 'optional': True, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}, {'name': 'reason', 'optional': True, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/zwMultichannel/1
	 id ( <class 'str'> ) : 
		 zwMultichannel
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Zw Multichannel
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'epEvent': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'epInfo': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'enableEpEvents': {'name': 'enableEpEvents', 'arguments': [{'name': 'enabledEndpoints', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}, 'epCmd': {'name': 'epCmd', 'arguments': [{'name': 'endpoint', 'optional': False, 'schema': {'title': 'Number', 'type': 'number'}}, {'name': 'commands', 'optional': False, 'schema': {'title': 'String', 'type': 'string', 'maxLength': 255}}]}}


Response from  https://api.smartthings.com/v1/capabilities/windowShadeTiltLevel/1
	 id ( <class 'str'> ) : 
		 windowShadeTiltLevel
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Window Shade Tilt Level
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'shadeTiltLevel': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'setter': 'setShadeTiltLevel', 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'setShadeTiltLevel': {'name': 'setShadeTiltLevel', 'arguments': [{'name': 'level', 'optional': False, 'schema': {'type': 'integer', 'minimum': 0, 'maximum': 100}}]}}


Response from  https://api.smartthings.com/v1/capabilities/ultravioletIndex/1
	 id ( <class 'str'> ) : 
		 ultravioletIndex
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Ultraviolet Index
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'ultravioletIndex': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0, 'maximum': 255}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/vehicleFuelLevel/1
	 id ( <class 'str'> ) : 
		 vehicleFuelLevel
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Vehicle Fuel Level
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'fuelLevel': {'schema': {'title': 'IntegerPercent', 'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 100}, 'unit': {'type': 'string', 'enum': ['%'], 'default': '%'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/videoClips/1
	 id ( <class 'str'> ) : 
		 videoClips
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Video Clips
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'videoClip': {'schema': {'type': 'object', 'properties': {'value': {'title': 'VideoClip', 'type': 'object', 'additionalProperties': False, 'properties': {'status': {'title': 'VideoClipStatus', 'type': 'string', 'enum': ['initiated', 'streaming', 'completed', 'failed', 'ignored']}, 'clipId': {'title': 'String', 'type': 'string', 'maxLength': 255}, 'thumbnailUrl': {'title': 'URL', 'type': 'string', 'pattern': "^(https?):\\/\\/((?:[a-zA-Z0-9.-]|%[0-9A-F]{2}){3,})(?::(\\d+))?((?:\\/(?:[a-zA-Z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*)*)(?:\\?((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?$"}, 'clipUrl': {'title': 'URL', 'type': 'string', 'pattern': "^(https?):\\/\\/((?:[a-zA-Z0-9.-]|%[0-9A-F]{2}){3,})(?::(\\d+))?((?:\\/(?:[a-zA-Z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*)*)(?:\\?((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?$"}, 'startTime': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}, 'captureTime': {'title': 'Iso8601Date', 'type': 'string', 'pattern': '^(?:[1-9]\\d{3}-?(?:(?:0[1-9]|1[0-2])-?(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-?(?:29|30)|(?:0[13578]|1[02])-?31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-?02-?29)T(?:[01]\\d|2[0-3]):?[0-5]\\d:?[0-5]\\d(?:\\.\\d{3})?(?:Z|[+-][01]\\d(?::?[0-5]\\d)?)$'}, 'duration': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {'captureClip': {'name': 'captureClip', 'arguments': [{'name': 'duration', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}, {'name': 'preFetch', 'optional': False, 'schema': {'title': 'PositiveInteger', 'type': 'integer', 'minimum': 0}}]}}


Response from  https://api.smartthings.com/v1/capabilities/waterPressureMeasurement/1
	 id ( <class 'str'> ) : 
		 waterPressureMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Water Pressure Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'pressureAlarm': {'schema': {'type': 'object', 'properties': {'value': {'type': 'string', 'enum': ['normal', 'low', 'high']}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}, 'pressure': {'schema': {'type': 'object', 'properties': {'value': {'type': 'number', 'minimum': 0}, 'unit': {'type': 'string', 'enum': ['psi', 'kPa', 'bar'], 'default': 'psi'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/voltageMeasurement/1
	 id ( <class 'str'> ) : 
		 voltageMeasurement
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 live
	 name ( <class 'str'> ) : 
		 Voltage Measurement
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'voltage': {'schema': {'type': 'object', 'properties': {'value': {'title': 'Number', 'type': 'number'}, 'unit': {'type': 'string', 'enum': ['V'], 'default': 'V'}}, 'additionalProperties': False, 'required': ['value']}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


Response from  https://api.smartthings.com/v1/capabilities/vehicleInformation/1
	 id ( <class 'str'> ) : 
		 vehicleInformation
	 version ( <class 'int'> ) : 
		 1
	 status ( <class 'str'> ) : 
		 proposed
	 name ( <class 'str'> ) : 
		 Vehicle Information
	 ephemeral ( <class 'bool'> ) : 
		 False
	 attributes ( <class 'dict'> ) : 
		 {'vehicleColor': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'vehicleYear': {'schema': {'type': 'object', 'properties': {'value': {'type': 'integer', 'minimum': 0, 'maximum': 9999}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'vehicleImage': {'schema': {'type': 'object', 'properties': {'value': {'title': 'URL', 'type': 'string', 'pattern': "^(https?):\\/\\/((?:[a-zA-Z0-9.-]|%[0-9A-F]{2}){3,})(?::(\\d+))?((?:\\/(?:[a-zA-Z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*)*)(?:\\?((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-zA-Z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*))?$"}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'vehicleTrim': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'vehiclePlate': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'vehicleModel': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'vehicleId': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}, 'vehicleMake': {'schema': {'type': 'object', 'properties': {'value': {'title': 'String', 'type': 'string', 'maxLength': 255}}, 'additionalProperties': False, 'required': []}, 'enumCommands': []}}
	 commands ( <class 'dict'> ) : 
		 {}


